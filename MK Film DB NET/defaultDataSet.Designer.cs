//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MK_Film_DB_NET {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("defaultDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class defaultDataSet : global::System.Data.DataSet {
        
        private DystrybucjaDataTable tableDystrybucja;
        
        private FilmDataTable tableFilm;
        
        private LokZdjDataTable tableLokZdj;
        
        private ObsadaDataTable tableObsada;
        
        private OcenaDataTable tableOcena;
        
        private ProdukcjaDataTable tableProdukcja;
        
        private WYPINDataTable tableWYPIN;
        
        private WYPODINDataTable tableWYPODIN;
        
        private global::System.Data.DataRelation relationFK_Film_Dystrybucja;
        
        private global::System.Data.DataRelation relationFK_Film_LokZdj;
        
        private global::System.Data.DataRelation relationFK_Film_Obsada;
        
        private global::System.Data.DataRelation relationFK_Film_Ocena;
        
        private global::System.Data.DataRelation relationFK_Film_Produkcja;
        
        private global::System.Data.DataRelation relationFK_Film_WYPIN;
        
        private global::System.Data.DataRelation relationFK_Film_WYPODIN;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public defaultDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected defaultDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Dystrybucja"] != null)) {
                    base.Tables.Add(new DystrybucjaDataTable(ds.Tables["Dystrybucja"]));
                }
                if ((ds.Tables["Film"] != null)) {
                    base.Tables.Add(new FilmDataTable(ds.Tables["Film"]));
                }
                if ((ds.Tables["LokZdj"] != null)) {
                    base.Tables.Add(new LokZdjDataTable(ds.Tables["LokZdj"]));
                }
                if ((ds.Tables["Obsada"] != null)) {
                    base.Tables.Add(new ObsadaDataTable(ds.Tables["Obsada"]));
                }
                if ((ds.Tables["Ocena"] != null)) {
                    base.Tables.Add(new OcenaDataTable(ds.Tables["Ocena"]));
                }
                if ((ds.Tables["Produkcja"] != null)) {
                    base.Tables.Add(new ProdukcjaDataTable(ds.Tables["Produkcja"]));
                }
                if ((ds.Tables["WYPIN"] != null)) {
                    base.Tables.Add(new WYPINDataTable(ds.Tables["WYPIN"]));
                }
                if ((ds.Tables["WYPODIN"] != null)) {
                    base.Tables.Add(new WYPODINDataTable(ds.Tables["WYPODIN"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DystrybucjaDataTable Dystrybucja {
            get {
                return this.tableDystrybucja;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FilmDataTable Film {
            get {
                return this.tableFilm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LokZdjDataTable LokZdj {
            get {
                return this.tableLokZdj;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ObsadaDataTable Obsada {
            get {
                return this.tableObsada;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OcenaDataTable Ocena {
            get {
                return this.tableOcena;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProdukcjaDataTable Produkcja {
            get {
                return this.tableProdukcja;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WYPINDataTable WYPIN {
            get {
                return this.tableWYPIN;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WYPODINDataTable WYPODIN {
            get {
                return this.tableWYPODIN;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            defaultDataSet cln = ((defaultDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Dystrybucja"] != null)) {
                    base.Tables.Add(new DystrybucjaDataTable(ds.Tables["Dystrybucja"]));
                }
                if ((ds.Tables["Film"] != null)) {
                    base.Tables.Add(new FilmDataTable(ds.Tables["Film"]));
                }
                if ((ds.Tables["LokZdj"] != null)) {
                    base.Tables.Add(new LokZdjDataTable(ds.Tables["LokZdj"]));
                }
                if ((ds.Tables["Obsada"] != null)) {
                    base.Tables.Add(new ObsadaDataTable(ds.Tables["Obsada"]));
                }
                if ((ds.Tables["Ocena"] != null)) {
                    base.Tables.Add(new OcenaDataTable(ds.Tables["Ocena"]));
                }
                if ((ds.Tables["Produkcja"] != null)) {
                    base.Tables.Add(new ProdukcjaDataTable(ds.Tables["Produkcja"]));
                }
                if ((ds.Tables["WYPIN"] != null)) {
                    base.Tables.Add(new WYPINDataTable(ds.Tables["WYPIN"]));
                }
                if ((ds.Tables["WYPODIN"] != null)) {
                    base.Tables.Add(new WYPODINDataTable(ds.Tables["WYPODIN"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDystrybucja = ((DystrybucjaDataTable)(base.Tables["Dystrybucja"]));
            if ((initTable == true)) {
                if ((this.tableDystrybucja != null)) {
                    this.tableDystrybucja.InitVars();
                }
            }
            this.tableFilm = ((FilmDataTable)(base.Tables["Film"]));
            if ((initTable == true)) {
                if ((this.tableFilm != null)) {
                    this.tableFilm.InitVars();
                }
            }
            this.tableLokZdj = ((LokZdjDataTable)(base.Tables["LokZdj"]));
            if ((initTable == true)) {
                if ((this.tableLokZdj != null)) {
                    this.tableLokZdj.InitVars();
                }
            }
            this.tableObsada = ((ObsadaDataTable)(base.Tables["Obsada"]));
            if ((initTable == true)) {
                if ((this.tableObsada != null)) {
                    this.tableObsada.InitVars();
                }
            }
            this.tableOcena = ((OcenaDataTable)(base.Tables["Ocena"]));
            if ((initTable == true)) {
                if ((this.tableOcena != null)) {
                    this.tableOcena.InitVars();
                }
            }
            this.tableProdukcja = ((ProdukcjaDataTable)(base.Tables["Produkcja"]));
            if ((initTable == true)) {
                if ((this.tableProdukcja != null)) {
                    this.tableProdukcja.InitVars();
                }
            }
            this.tableWYPIN = ((WYPINDataTable)(base.Tables["WYPIN"]));
            if ((initTable == true)) {
                if ((this.tableWYPIN != null)) {
                    this.tableWYPIN.InitVars();
                }
            }
            this.tableWYPODIN = ((WYPODINDataTable)(base.Tables["WYPODIN"]));
            if ((initTable == true)) {
                if ((this.tableWYPODIN != null)) {
                    this.tableWYPODIN.InitVars();
                }
            }
            this.relationFK_Film_Dystrybucja = this.Relations["FK_Film_Dystrybucja"];
            this.relationFK_Film_LokZdj = this.Relations["FK_Film_LokZdj"];
            this.relationFK_Film_Obsada = this.Relations["FK_Film_Obsada"];
            this.relationFK_Film_Ocena = this.Relations["FK_Film_Ocena"];
            this.relationFK_Film_Produkcja = this.Relations["FK_Film_Produkcja"];
            this.relationFK_Film_WYPIN = this.Relations["FK_Film_WYPIN"];
            this.relationFK_Film_WYPODIN = this.Relations["FK_Film_WYPODIN"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "defaultDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/defaultDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDystrybucja = new DystrybucjaDataTable();
            base.Tables.Add(this.tableDystrybucja);
            this.tableFilm = new FilmDataTable();
            base.Tables.Add(this.tableFilm);
            this.tableLokZdj = new LokZdjDataTable();
            base.Tables.Add(this.tableLokZdj);
            this.tableObsada = new ObsadaDataTable();
            base.Tables.Add(this.tableObsada);
            this.tableOcena = new OcenaDataTable();
            base.Tables.Add(this.tableOcena);
            this.tableProdukcja = new ProdukcjaDataTable();
            base.Tables.Add(this.tableProdukcja);
            this.tableWYPIN = new WYPINDataTable();
            base.Tables.Add(this.tableWYPIN);
            this.tableWYPODIN = new WYPODINDataTable();
            base.Tables.Add(this.tableWYPODIN);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Film_Dystrybucja", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableDystrybucja.IDPDBColumn});
            this.tableDystrybucja.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Film_LokZdj", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLokZdj.IDPDBColumn});
            this.tableLokZdj.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Film_Obsada", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableObsada.IDPDBColumn});
            this.tableObsada.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Film_Ocena", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOcena.IDPDBColumn});
            this.tableOcena.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Film_Produkcja", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProdukcja.IDPDBColumn});
            this.tableProdukcja.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Film_WYPIN", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableWYPIN.IDPDBColumn});
            this.tableWYPIN.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Film_WYPODIN", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableWYPODIN.IDPDBColumn});
            this.tableWYPODIN.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_Film_Dystrybucja = new global::System.Data.DataRelation("FK_Film_Dystrybucja", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableDystrybucja.IDPDBColumn}, false);
            this.Relations.Add(this.relationFK_Film_Dystrybucja);
            this.relationFK_Film_LokZdj = new global::System.Data.DataRelation("FK_Film_LokZdj", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLokZdj.IDPDBColumn}, false);
            this.Relations.Add(this.relationFK_Film_LokZdj);
            this.relationFK_Film_Obsada = new global::System.Data.DataRelation("FK_Film_Obsada", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableObsada.IDPDBColumn}, false);
            this.Relations.Add(this.relationFK_Film_Obsada);
            this.relationFK_Film_Ocena = new global::System.Data.DataRelation("FK_Film_Ocena", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOcena.IDPDBColumn}, false);
            this.Relations.Add(this.relationFK_Film_Ocena);
            this.relationFK_Film_Produkcja = new global::System.Data.DataRelation("FK_Film_Produkcja", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProdukcja.IDPDBColumn}, false);
            this.Relations.Add(this.relationFK_Film_Produkcja);
            this.relationFK_Film_WYPIN = new global::System.Data.DataRelation("FK_Film_WYPIN", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableWYPIN.IDPDBColumn}, false);
            this.Relations.Add(this.relationFK_Film_WYPIN);
            this.relationFK_Film_WYPODIN = new global::System.Data.DataRelation("FK_Film_WYPODIN", new global::System.Data.DataColumn[] {
                        this.tableFilm.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableWYPODIN.IDPDBColumn}, false);
            this.Relations.Add(this.relationFK_Film_WYPODIN);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDystrybucja() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFilm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLokZdj() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeObsada() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOcena() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProdukcja() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWYPIN() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWYPODIN() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            defaultDataSet ds = new defaultDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DystrybucjaRowChangeEventHandler(object sender, DystrybucjaRowChangeEvent e);
        
        public delegate void FilmRowChangeEventHandler(object sender, FilmRowChangeEvent e);
        
        public delegate void LokZdjRowChangeEventHandler(object sender, LokZdjRowChangeEvent e);
        
        public delegate void ObsadaRowChangeEventHandler(object sender, ObsadaRowChangeEvent e);
        
        public delegate void OcenaRowChangeEventHandler(object sender, OcenaRowChangeEvent e);
        
        public delegate void ProdukcjaRowChangeEventHandler(object sender, ProdukcjaRowChangeEvent e);
        
        public delegate void WYPINRowChangeEventHandler(object sender, WYPINRowChangeEvent e);
        
        public delegate void WYPODINRowChangeEventHandler(object sender, WYPODINRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DystrybucjaDataTable : global::System.Data.TypedTableBase<DystrybucjaRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIDPDB;
            
            private global::System.Data.DataColumn columnNazwa;
            
            private global::System.Data.DataColumn columnAdres;
            
            private global::System.Data.DataColumn columnTel;
            
            private global::System.Data.DataColumn columnFax;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnWWW;
            
            private global::System.Data.DataColumn columnNarodowość;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaDataTable() {
                this.TableName = "Dystrybucja";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DystrybucjaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DystrybucjaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPDBColumn {
                get {
                    return this.columnIDPDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NazwaColumn {
                get {
                    return this.columnNazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdresColumn {
                get {
                    return this.columnAdres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelColumn {
                get {
                    return this.columnTel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WWWColumn {
                get {
                    return this.columnWWW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NarodowośćColumn {
                get {
                    return this.columnNarodowość;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaRow this[int index] {
                get {
                    return ((DystrybucjaRow)(this.Rows[index]));
                }
            }
            
            public event DystrybucjaRowChangeEventHandler DystrybucjaRowChanging;
            
            public event DystrybucjaRowChangeEventHandler DystrybucjaRowChanged;
            
            public event DystrybucjaRowChangeEventHandler DystrybucjaRowDeleting;
            
            public event DystrybucjaRowChangeEventHandler DystrybucjaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDystrybucjaRow(DystrybucjaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaRow AddDystrybucjaRow(FilmRow parentFilmRowByFK_Film_Dystrybucja, string Nazwa, string Adres, string Tel, string Fax, string Email, string WWW, string Narodowość) {
                DystrybucjaRow rowDystrybucjaRow = ((DystrybucjaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Nazwa,
                        Adres,
                        Tel,
                        Fax,
                        Email,
                        WWW,
                        Narodowość};
                if ((parentFilmRowByFK_Film_Dystrybucja != null)) {
                    columnValuesArray[1] = parentFilmRowByFK_Film_Dystrybucja[0];
                }
                rowDystrybucjaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDystrybucjaRow);
                return rowDystrybucjaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaRow FindByID(int ID) {
                return ((DystrybucjaRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DystrybucjaDataTable cln = ((DystrybucjaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DystrybucjaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIDPDB = base.Columns["IDPDB"];
                this.columnNazwa = base.Columns["Nazwa"];
                this.columnAdres = base.Columns["Adres"];
                this.columnTel = base.Columns["Tel"];
                this.columnFax = base.Columns["Fax"];
                this.columnEmail = base.Columns["Email"];
                this.columnWWW = base.Columns["WWW"];
                this.columnNarodowość = base.Columns["Narodowość"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIDPDB = new global::System.Data.DataColumn("IDPDB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPDB);
                this.columnNazwa = new global::System.Data.DataColumn("Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNazwa);
                this.columnAdres = new global::System.Data.DataColumn("Adres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdres);
                this.columnTel = new global::System.Data.DataColumn("Tel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTel);
                this.columnFax = new global::System.Data.DataColumn("Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnWWW = new global::System.Data.DataColumn("WWW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWWW);
                this.columnNarodowość = new global::System.Data.DataColumn("Narodowość", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNarodowość);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnIDPDB.AllowDBNull = false;
                this.columnNazwa.MaxLength = 100;
                this.columnAdres.MaxLength = 100;
                this.columnTel.MaxLength = 100;
                this.columnFax.MaxLength = 100;
                this.columnEmail.MaxLength = 100;
                this.columnWWW.MaxLength = 100;
                this.columnNarodowość.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaRow NewDystrybucjaRow() {
                return ((DystrybucjaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DystrybucjaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DystrybucjaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DystrybucjaRowChanged != null)) {
                    this.DystrybucjaRowChanged(this, new DystrybucjaRowChangeEvent(((DystrybucjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DystrybucjaRowChanging != null)) {
                    this.DystrybucjaRowChanging(this, new DystrybucjaRowChangeEvent(((DystrybucjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DystrybucjaRowDeleted != null)) {
                    this.DystrybucjaRowDeleted(this, new DystrybucjaRowChangeEvent(((DystrybucjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DystrybucjaRowDeleting != null)) {
                    this.DystrybucjaRowDeleting(this, new DystrybucjaRowChangeEvent(((DystrybucjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDystrybucjaRow(DystrybucjaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DystrybucjaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FilmDataTable : global::System.Data.TypedTableBase<FilmRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTytul;
            
            private global::System.Data.DataColumn columnTytulOrig;
            
            private global::System.Data.DataColumn columnGatunek;
            
            private global::System.Data.DataColumn columnOpis;
            
            private global::System.Data.DataColumn columnpathtofront;
            
            private global::System.Data.DataColumn columnpathtoback;
            
            private global::System.Data.DataColumn columnOW_SD;
            
            private global::System.Data.DataColumn columnOW_Obs;
            
            private global::System.Data.DataColumn columnOW_Zdj;
            
            private global::System.Data.DataColumn columnOW_Wart;
            
            private global::System.Data.DataColumn columnOW_ALL;
            
            private global::System.Data.DataColumn columnDOE_Imie;
            
            private global::System.Data.DataColumn columnDOE_Nazw;
            
            private global::System.Data.DataColumn columnDOE_Adres;
            
            private global::System.Data.DataColumn columnDOE_MN_Nazwa;
            
            private global::System.Data.DataColumn columnDOE_MN_Adres;
            
            private global::System.Data.DataColumn columnDOE_MN_WWW;
            
            private global::System.Data.DataColumn columnDOE_MN_Tel;
            
            private global::System.Data.DataColumn columnDOE_MN_Fax;
            
            private global::System.Data.DataColumn columnDOE_MN_Email;
            
            private global::System.Data.DataColumn columnDOE_Cena;
            
            private global::System.Data.DataColumn columnDOE_DataSkat;
            
            private global::System.Data.DataColumn columnDOE_DataUtr;
            
            private global::System.Data.DataColumn columnDOE_NrKat;
            
            private global::System.Data.DataColumn columnDOE_WartAkt;
            
            private global::System.Data.DataColumn columnDOE_DataZak;
            
            private global::System.Data.DataColumn columnDOE_Nośnik;
            
            private global::System.Data.DataColumn columnIOF_RokProd;
            
            private global::System.Data.DataColumn columnIOF_DataPrem;
            
            private global::System.Data.DataColumn columnIOF_CzasProj;
            
            private global::System.Data.DataColumn columnIOF_FormWysw;
            
            private global::System.Data.DataColumn columnIOF_SysKodObr;
            
            private global::System.Data.DataColumn columnIOF_JezykLekt;
            
            private global::System.Data.DataColumn columnIOF_JezykNap;
            
            private global::System.Data.DataColumn columnIOF_KW_Nazwa;
            
            private global::System.Data.DataColumn columnIOF_KW_Typ;
            
            private global::System.Data.DataColumn columnIOF_KW_Wersja;
            
            private global::System.Data.DataColumn columnIOF_KA_Nazwa;
            
            private global::System.Data.DataColumn columnIOF_KA_Typ;
            
            private global::System.Data.DataColumn columnIOF_KA_Wersja;
            
            private global::System.Data.DataColumn columnIOF_ZAB_Nazwa;
            
            private global::System.Data.DataColumn columnIOF_ZAB_Typ;
            
            private global::System.Data.DataColumn columnIOF_ZAB_Wersja;
            
            private global::System.Data.DataColumn columnIOF_KrajProd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmDataTable() {
                this.TableName = "Film";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FilmDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FilmDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TytulColumn {
                get {
                    return this.columnTytul;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TytulOrigColumn {
                get {
                    return this.columnTytulOrig;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GatunekColumn {
                get {
                    return this.columnGatunek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpisColumn {
                get {
                    return this.columnOpis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pathtofrontColumn {
                get {
                    return this.columnpathtofront;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pathtobackColumn {
                get {
                    return this.columnpathtoback;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OW_SDColumn {
                get {
                    return this.columnOW_SD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OW_ObsColumn {
                get {
                    return this.columnOW_Obs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OW_ZdjColumn {
                get {
                    return this.columnOW_Zdj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OW_WartColumn {
                get {
                    return this.columnOW_Wart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OW_ALLColumn {
                get {
                    return this.columnOW_ALL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_ImieColumn {
                get {
                    return this.columnDOE_Imie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_NazwColumn {
                get {
                    return this.columnDOE_Nazw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_AdresColumn {
                get {
                    return this.columnDOE_Adres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_MN_NazwaColumn {
                get {
                    return this.columnDOE_MN_Nazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_MN_AdresColumn {
                get {
                    return this.columnDOE_MN_Adres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_MN_WWWColumn {
                get {
                    return this.columnDOE_MN_WWW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_MN_TelColumn {
                get {
                    return this.columnDOE_MN_Tel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_MN_FaxColumn {
                get {
                    return this.columnDOE_MN_Fax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_MN_EmailColumn {
                get {
                    return this.columnDOE_MN_Email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_CenaColumn {
                get {
                    return this.columnDOE_Cena;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_DataSkatColumn {
                get {
                    return this.columnDOE_DataSkat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_DataUtrColumn {
                get {
                    return this.columnDOE_DataUtr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_NrKatColumn {
                get {
                    return this.columnDOE_NrKat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_WartAktColumn {
                get {
                    return this.columnDOE_WartAkt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_DataZakColumn {
                get {
                    return this.columnDOE_DataZak;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOE_NośnikColumn {
                get {
                    return this.columnDOE_Nośnik;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_RokProdColumn {
                get {
                    return this.columnIOF_RokProd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_DataPremColumn {
                get {
                    return this.columnIOF_DataPrem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_CzasProjColumn {
                get {
                    return this.columnIOF_CzasProj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_FormWyswColumn {
                get {
                    return this.columnIOF_FormWysw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_SysKodObrColumn {
                get {
                    return this.columnIOF_SysKodObr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_JezykLektColumn {
                get {
                    return this.columnIOF_JezykLekt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_JezykNapColumn {
                get {
                    return this.columnIOF_JezykNap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_KW_NazwaColumn {
                get {
                    return this.columnIOF_KW_Nazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_KW_TypColumn {
                get {
                    return this.columnIOF_KW_Typ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_KW_WersjaColumn {
                get {
                    return this.columnIOF_KW_Wersja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_KA_NazwaColumn {
                get {
                    return this.columnIOF_KA_Nazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_KA_TypColumn {
                get {
                    return this.columnIOF_KA_Typ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_KA_WersjaColumn {
                get {
                    return this.columnIOF_KA_Wersja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_ZAB_NazwaColumn {
                get {
                    return this.columnIOF_ZAB_Nazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_ZAB_TypColumn {
                get {
                    return this.columnIOF_ZAB_Typ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_ZAB_WersjaColumn {
                get {
                    return this.columnIOF_ZAB_Wersja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IOF_KrajProdColumn {
                get {
                    return this.columnIOF_KrajProd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow this[int index] {
                get {
                    return ((FilmRow)(this.Rows[index]));
                }
            }
            
            public event FilmRowChangeEventHandler FilmRowChanging;
            
            public event FilmRowChangeEventHandler FilmRowChanged;
            
            public event FilmRowChangeEventHandler FilmRowDeleting;
            
            public event FilmRowChangeEventHandler FilmRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFilmRow(FilmRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow AddFilmRow(
                        string Tytul, 
                        string TytulOrig, 
                        string Gatunek, 
                        string Opis, 
                        string pathtofront, 
                        string pathtoback, 
                        string OW_SD, 
                        string OW_Obs, 
                        string OW_Zdj, 
                        string OW_Wart, 
                        string OW_ALL, 
                        string DOE_Imie, 
                        string DOE_Nazw, 
                        string DOE_Adres, 
                        string DOE_MN_Nazwa, 
                        string DOE_MN_Adres, 
                        string DOE_MN_WWW, 
                        string DOE_MN_Tel, 
                        string DOE_MN_Fax, 
                        string DOE_MN_Email, 
                        string DOE_Cena, 
                        string DOE_DataSkat, 
                        string DOE_DataUtr, 
                        string DOE_NrKat, 
                        string DOE_WartAkt, 
                        string DOE_DataZak, 
                        string DOE_Nośnik, 
                        string IOF_RokProd, 
                        string IOF_DataPrem, 
                        string IOF_CzasProj, 
                        string IOF_FormWysw, 
                        string IOF_SysKodObr, 
                        string IOF_JezykLekt, 
                        string IOF_JezykNap, 
                        string IOF_KW_Nazwa, 
                        string IOF_KW_Typ, 
                        string IOF_KW_Wersja, 
                        string IOF_KA_Nazwa, 
                        string IOF_KA_Typ, 
                        string IOF_KA_Wersja, 
                        string IOF_ZAB_Nazwa, 
                        string IOF_ZAB_Typ, 
                        string IOF_ZAB_Wersja, 
                        string IOF_KrajProd) {
                FilmRow rowFilmRow = ((FilmRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Tytul,
                        TytulOrig,
                        Gatunek,
                        Opis,
                        pathtofront,
                        pathtoback,
                        OW_SD,
                        OW_Obs,
                        OW_Zdj,
                        OW_Wart,
                        OW_ALL,
                        DOE_Imie,
                        DOE_Nazw,
                        DOE_Adres,
                        DOE_MN_Nazwa,
                        DOE_MN_Adres,
                        DOE_MN_WWW,
                        DOE_MN_Tel,
                        DOE_MN_Fax,
                        DOE_MN_Email,
                        DOE_Cena,
                        DOE_DataSkat,
                        DOE_DataUtr,
                        DOE_NrKat,
                        DOE_WartAkt,
                        DOE_DataZak,
                        DOE_Nośnik,
                        IOF_RokProd,
                        IOF_DataPrem,
                        IOF_CzasProj,
                        IOF_FormWysw,
                        IOF_SysKodObr,
                        IOF_JezykLekt,
                        IOF_JezykNap,
                        IOF_KW_Nazwa,
                        IOF_KW_Typ,
                        IOF_KW_Wersja,
                        IOF_KA_Nazwa,
                        IOF_KA_Typ,
                        IOF_KA_Wersja,
                        IOF_ZAB_Nazwa,
                        IOF_ZAB_Typ,
                        IOF_ZAB_Wersja,
                        IOF_KrajProd};
                rowFilmRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFilmRow);
                return rowFilmRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FindByID(int ID) {
                return ((FilmRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FilmDataTable cln = ((FilmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FilmDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTytul = base.Columns["Tytul"];
                this.columnTytulOrig = base.Columns["TytulOrig"];
                this.columnGatunek = base.Columns["Gatunek"];
                this.columnOpis = base.Columns["Opis"];
                this.columnpathtofront = base.Columns["pathtofront"];
                this.columnpathtoback = base.Columns["pathtoback"];
                this.columnOW_SD = base.Columns["OW_SD"];
                this.columnOW_Obs = base.Columns["OW_Obs"];
                this.columnOW_Zdj = base.Columns["OW_Zdj"];
                this.columnOW_Wart = base.Columns["OW_Wart"];
                this.columnOW_ALL = base.Columns["OW_ALL"];
                this.columnDOE_Imie = base.Columns["DOE_Imie"];
                this.columnDOE_Nazw = base.Columns["DOE_Nazw"];
                this.columnDOE_Adres = base.Columns["DOE_Adres"];
                this.columnDOE_MN_Nazwa = base.Columns["DOE_MN_Nazwa"];
                this.columnDOE_MN_Adres = base.Columns["DOE_MN_Adres"];
                this.columnDOE_MN_WWW = base.Columns["DOE_MN_WWW"];
                this.columnDOE_MN_Tel = base.Columns["DOE_MN_Tel"];
                this.columnDOE_MN_Fax = base.Columns["DOE_MN_Fax"];
                this.columnDOE_MN_Email = base.Columns["DOE_MN_Email"];
                this.columnDOE_Cena = base.Columns["DOE_Cena"];
                this.columnDOE_DataSkat = base.Columns["DOE_DataSkat"];
                this.columnDOE_DataUtr = base.Columns["DOE_DataUtr"];
                this.columnDOE_NrKat = base.Columns["DOE_NrKat"];
                this.columnDOE_WartAkt = base.Columns["DOE_WartAkt"];
                this.columnDOE_DataZak = base.Columns["DOE_DataZak"];
                this.columnDOE_Nośnik = base.Columns["DOE_Nośnik"];
                this.columnIOF_RokProd = base.Columns["IOF_RokProd"];
                this.columnIOF_DataPrem = base.Columns["IOF_DataPrem"];
                this.columnIOF_CzasProj = base.Columns["IOF_CzasProj"];
                this.columnIOF_FormWysw = base.Columns["IOF_FormWysw"];
                this.columnIOF_SysKodObr = base.Columns["IOF_SysKodObr"];
                this.columnIOF_JezykLekt = base.Columns["IOF_JezykLekt"];
                this.columnIOF_JezykNap = base.Columns["IOF_JezykNap"];
                this.columnIOF_KW_Nazwa = base.Columns["IOF_KW_Nazwa"];
                this.columnIOF_KW_Typ = base.Columns["IOF_KW_Typ"];
                this.columnIOF_KW_Wersja = base.Columns["IOF_KW_Wersja"];
                this.columnIOF_KA_Nazwa = base.Columns["IOF_KA_Nazwa"];
                this.columnIOF_KA_Typ = base.Columns["IOF_KA_Typ"];
                this.columnIOF_KA_Wersja = base.Columns["IOF_KA_Wersja"];
                this.columnIOF_ZAB_Nazwa = base.Columns["IOF_ZAB_Nazwa"];
                this.columnIOF_ZAB_Typ = base.Columns["IOF_ZAB_Typ"];
                this.columnIOF_ZAB_Wersja = base.Columns["IOF_ZAB_Wersja"];
                this.columnIOF_KrajProd = base.Columns["IOF_KrajProd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTytul = new global::System.Data.DataColumn("Tytul", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTytul);
                this.columnTytulOrig = new global::System.Data.DataColumn("TytulOrig", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTytulOrig);
                this.columnGatunek = new global::System.Data.DataColumn("Gatunek", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGatunek);
                this.columnOpis = new global::System.Data.DataColumn("Opis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpis);
                this.columnpathtofront = new global::System.Data.DataColumn("pathtofront", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpathtofront);
                this.columnpathtoback = new global::System.Data.DataColumn("pathtoback", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpathtoback);
                this.columnOW_SD = new global::System.Data.DataColumn("OW_SD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOW_SD);
                this.columnOW_Obs = new global::System.Data.DataColumn("OW_Obs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOW_Obs);
                this.columnOW_Zdj = new global::System.Data.DataColumn("OW_Zdj", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOW_Zdj);
                this.columnOW_Wart = new global::System.Data.DataColumn("OW_Wart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOW_Wart);
                this.columnOW_ALL = new global::System.Data.DataColumn("OW_ALL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOW_ALL);
                this.columnDOE_Imie = new global::System.Data.DataColumn("DOE_Imie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_Imie);
                this.columnDOE_Nazw = new global::System.Data.DataColumn("DOE_Nazw", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_Nazw);
                this.columnDOE_Adres = new global::System.Data.DataColumn("DOE_Adres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_Adres);
                this.columnDOE_MN_Nazwa = new global::System.Data.DataColumn("DOE_MN_Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_MN_Nazwa);
                this.columnDOE_MN_Adres = new global::System.Data.DataColumn("DOE_MN_Adres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_MN_Adres);
                this.columnDOE_MN_WWW = new global::System.Data.DataColumn("DOE_MN_WWW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_MN_WWW);
                this.columnDOE_MN_Tel = new global::System.Data.DataColumn("DOE_MN_Tel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_MN_Tel);
                this.columnDOE_MN_Fax = new global::System.Data.DataColumn("DOE_MN_Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_MN_Fax);
                this.columnDOE_MN_Email = new global::System.Data.DataColumn("DOE_MN_Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_MN_Email);
                this.columnDOE_Cena = new global::System.Data.DataColumn("DOE_Cena", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_Cena);
                this.columnDOE_DataSkat = new global::System.Data.DataColumn("DOE_DataSkat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_DataSkat);
                this.columnDOE_DataUtr = new global::System.Data.DataColumn("DOE_DataUtr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_DataUtr);
                this.columnDOE_NrKat = new global::System.Data.DataColumn("DOE_NrKat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_NrKat);
                this.columnDOE_WartAkt = new global::System.Data.DataColumn("DOE_WartAkt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_WartAkt);
                this.columnDOE_DataZak = new global::System.Data.DataColumn("DOE_DataZak", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_DataZak);
                this.columnDOE_Nośnik = new global::System.Data.DataColumn("DOE_Nośnik", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOE_Nośnik);
                this.columnIOF_RokProd = new global::System.Data.DataColumn("IOF_RokProd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_RokProd);
                this.columnIOF_DataPrem = new global::System.Data.DataColumn("IOF_DataPrem", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_DataPrem);
                this.columnIOF_CzasProj = new global::System.Data.DataColumn("IOF_CzasProj", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_CzasProj);
                this.columnIOF_FormWysw = new global::System.Data.DataColumn("IOF_FormWysw", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_FormWysw);
                this.columnIOF_SysKodObr = new global::System.Data.DataColumn("IOF_SysKodObr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_SysKodObr);
                this.columnIOF_JezykLekt = new global::System.Data.DataColumn("IOF_JezykLekt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_JezykLekt);
                this.columnIOF_JezykNap = new global::System.Data.DataColumn("IOF_JezykNap", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_JezykNap);
                this.columnIOF_KW_Nazwa = new global::System.Data.DataColumn("IOF_KW_Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_KW_Nazwa);
                this.columnIOF_KW_Typ = new global::System.Data.DataColumn("IOF_KW_Typ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_KW_Typ);
                this.columnIOF_KW_Wersja = new global::System.Data.DataColumn("IOF_KW_Wersja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_KW_Wersja);
                this.columnIOF_KA_Nazwa = new global::System.Data.DataColumn("IOF_KA_Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_KA_Nazwa);
                this.columnIOF_KA_Typ = new global::System.Data.DataColumn("IOF_KA_Typ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_KA_Typ);
                this.columnIOF_KA_Wersja = new global::System.Data.DataColumn("IOF_KA_Wersja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_KA_Wersja);
                this.columnIOF_ZAB_Nazwa = new global::System.Data.DataColumn("IOF_ZAB_Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_ZAB_Nazwa);
                this.columnIOF_ZAB_Typ = new global::System.Data.DataColumn("IOF_ZAB_Typ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_ZAB_Typ);
                this.columnIOF_ZAB_Wersja = new global::System.Data.DataColumn("IOF_ZAB_Wersja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_ZAB_Wersja);
                this.columnIOF_KrajProd = new global::System.Data.DataColumn("IOF_KrajProd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIOF_KrajProd);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTytul.Caption = "Tytuł";
                this.columnTytul.MaxLength = 500;
                this.columnTytulOrig.Caption = "Tytuł Orginału";
                this.columnTytulOrig.MaxLength = 500;
                this.columnGatunek.MaxLength = 100;
                this.columnOpis.MaxLength = 4000;
                this.columnpathtofront.Caption = "Ścieżka do przodu okładki";
                this.columnpathtofront.MaxLength = 500;
                this.columnpathtoback.Caption = "Ścieżka do tylniej okładki ";
                this.columnpathtoback.MaxLength = 500;
                this.columnOW_SD.Caption = "Ocena własna - ściezka dźwiękowa";
                this.columnOW_SD.MaxLength = 100;
                this.columnOW_Obs.Caption = "Ocena własna - Obsada";
                this.columnOW_Obs.MaxLength = 100;
                this.columnOW_Zdj.Caption = "Ocena własna - Zdjęcia";
                this.columnOW_Zdj.MaxLength = 100;
                this.columnOW_Wart.Caption = "Ocena własna - Wartośc artystyczna";
                this.columnOW_Wart.MaxLength = 100;
                this.columnOW_ALL.Caption = "Ocena własna - całość";
                this.columnOW_ALL.MaxLength = 100;
                this.columnDOE_Imie.Caption = "Dane o Egzemplarzu - Właściciel - Imię";
                this.columnDOE_Imie.MaxLength = 100;
                this.columnDOE_Nazw.Caption = "Dane o Egzemplarzu - Właściciel - Nazwisko";
                this.columnDOE_Nazw.MaxLength = 100;
                this.columnDOE_Adres.Caption = "Dane o Egzemplarzu - Właścieicl - Adres";
                this.columnDOE_Adres.MaxLength = 100;
                this.columnDOE_MN_Nazwa.Caption = "Dane o Egzemplarzu - Sklep - Nazwa";
                this.columnDOE_MN_Nazwa.MaxLength = 500;
                this.columnDOE_MN_Adres.Caption = "Dane o Egzemplarzu - Sklep - Adres";
                this.columnDOE_MN_Adres.MaxLength = 500;
                this.columnDOE_MN_WWW.Caption = "Dane o Egzemplarzu - Sklep - WWW";
                this.columnDOE_MN_WWW.MaxLength = 500;
                this.columnDOE_MN_Tel.Caption = "Dane o Egzemplarzu - Sklep - Telefon";
                this.columnDOE_MN_Tel.MaxLength = 100;
                this.columnDOE_MN_Fax.Caption = "Dane o Egzemplarzu - Sklep - Fax";
                this.columnDOE_MN_Fax.MaxLength = 100;
                this.columnDOE_MN_Email.Caption = "Dane o Egzemplarzu - Sklep -Email";
                this.columnDOE_MN_Email.MaxLength = 500;
                this.columnDOE_Cena.Caption = "Dane o Egzemplarzu - Cena";
                this.columnDOE_Cena.MaxLength = 100;
                this.columnDOE_DataSkat.Caption = "Dane o Egzemplarzu - Data Skatalogowania";
                this.columnDOE_DataSkat.MaxLength = 100;
                this.columnDOE_DataUtr.Caption = "Dane o Egzemplarzu - Data Utraty";
                this.columnDOE_DataUtr.MaxLength = 100;
                this.columnDOE_NrKat.Caption = "Dane o Egzemplarzu - Nr Katalogowy";
                this.columnDOE_NrKat.MaxLength = 200;
                this.columnDOE_WartAkt.Caption = "Dane o Egzemplarzu - Wartość Aktualna";
                this.columnDOE_WartAkt.MaxLength = 100;
                this.columnDOE_DataZak.Caption = "Dane o Egzemplarzu - Data Zakupu";
                this.columnDOE_DataZak.MaxLength = 100;
                this.columnDOE_Nośnik.Caption = "Dane o Egzemplarzu - Nośnik";
                this.columnDOE_Nośnik.MaxLength = 100;
                this.columnIOF_RokProd.Caption = "Info o Filmie - Rok Produkcji";
                this.columnIOF_RokProd.MaxLength = 100;
                this.columnIOF_DataPrem.Caption = "Info o Filmie - Data Premiery";
                this.columnIOF_DataPrem.MaxLength = 100;
                this.columnIOF_CzasProj.Caption = "Info o Filmie - Czas Projekcji";
                this.columnIOF_CzasProj.MaxLength = 100;
                this.columnIOF_FormWysw.Caption = "Info o Filmie - Format Wyświetlania";
                this.columnIOF_FormWysw.MaxLength = 100;
                this.columnIOF_SysKodObr.Caption = "Info o Filmie - System Kodowania Obrazu";
                this.columnIOF_SysKodObr.MaxLength = 100;
                this.columnIOF_JezykLekt.Caption = "Info o Filmie - Jezyk Lektora";
                this.columnIOF_JezykLekt.MaxLength = 500;
                this.columnIOF_JezykNap.Caption = "Info o Filmie - Jezyk Napisów";
                this.columnIOF_JezykNap.MaxLength = 500;
                this.columnIOF_KW_Nazwa.Caption = "Info o Filmie - Kodek Wideo - Nazwa";
                this.columnIOF_KW_Nazwa.MaxLength = 100;
                this.columnIOF_KW_Typ.Caption = "Info o Filmie - Kodek Wideo - Typ";
                this.columnIOF_KW_Typ.MaxLength = 100;
                this.columnIOF_KW_Wersja.Caption = "Info o Filmie - Kodek Wideo - Wersja";
                this.columnIOF_KW_Wersja.MaxLength = 100;
                this.columnIOF_KA_Nazwa.Caption = "Info o Filmie - Kodek Audio - Nazwa";
                this.columnIOF_KA_Nazwa.MaxLength = 100;
                this.columnIOF_KA_Typ.Caption = "Info o Filmie - Kodek Audio - Typ";
                this.columnIOF_KA_Typ.MaxLength = 100;
                this.columnIOF_KA_Wersja.Caption = "Info o Filmie - Kodek Audio - Wersja";
                this.columnIOF_KA_Wersja.MaxLength = 100;
                this.columnIOF_ZAB_Nazwa.Caption = "Info o Filmie - Zabezpieczenia - Nazwa";
                this.columnIOF_ZAB_Nazwa.MaxLength = 100;
                this.columnIOF_ZAB_Typ.Caption = "Info o Filmie - Zabezpieczenia - Typ";
                this.columnIOF_ZAB_Typ.MaxLength = 100;
                this.columnIOF_ZAB_Wersja.Caption = "Info o Filmie - Zabezpieczenia - Wersja";
                this.columnIOF_ZAB_Wersja.MaxLength = 100;
                this.columnIOF_KrajProd.Caption = "Info o Filmie - Kraj Produkcji";
                this.columnIOF_KrajProd.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow NewFilmRow() {
                return ((FilmRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FilmRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FilmRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FilmRowChanged != null)) {
                    this.FilmRowChanged(this, new FilmRowChangeEvent(((FilmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FilmRowChanging != null)) {
                    this.FilmRowChanging(this, new FilmRowChangeEvent(((FilmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FilmRowDeleted != null)) {
                    this.FilmRowDeleted(this, new FilmRowChangeEvent(((FilmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FilmRowDeleting != null)) {
                    this.FilmRowDeleting(this, new FilmRowChangeEvent(((FilmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFilmRow(FilmRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FilmDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LokZdjDataTable : global::System.Data.TypedTableBase<LokZdjRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIDPDB;
            
            private global::System.Data.DataColumn columnNazwaObiektu;
            
            private global::System.Data.DataColumn columnKraj;
            
            private global::System.Data.DataColumn columnMiejscowość;
            
            private global::System.Data.DataColumn columnRegion;
            
            private global::System.Data.DataColumn columnPora_roku;
            
            private global::System.Data.DataColumn columnData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjDataTable() {
                this.TableName = "LokZdj";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LokZdjDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LokZdjDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPDBColumn {
                get {
                    return this.columnIDPDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NazwaObiektuColumn {
                get {
                    return this.columnNazwaObiektu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KrajColumn {
                get {
                    return this.columnKraj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiejscowośćColumn {
                get {
                    return this.columnMiejscowość;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Pora_rokuColumn {
                get {
                    return this.columnPora_roku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjRow this[int index] {
                get {
                    return ((LokZdjRow)(this.Rows[index]));
                }
            }
            
            public event LokZdjRowChangeEventHandler LokZdjRowChanging;
            
            public event LokZdjRowChangeEventHandler LokZdjRowChanged;
            
            public event LokZdjRowChangeEventHandler LokZdjRowDeleting;
            
            public event LokZdjRowChangeEventHandler LokZdjRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLokZdjRow(LokZdjRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjRow AddLokZdjRow(FilmRow parentFilmRowByFK_Film_LokZdj, string NazwaObiektu, string Kraj, string Miejscowość, string Region, string Pora_roku, string Data) {
                LokZdjRow rowLokZdjRow = ((LokZdjRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        NazwaObiektu,
                        Kraj,
                        Miejscowość,
                        Region,
                        Pora_roku,
                        Data};
                if ((parentFilmRowByFK_Film_LokZdj != null)) {
                    columnValuesArray[1] = parentFilmRowByFK_Film_LokZdj[0];
                }
                rowLokZdjRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLokZdjRow);
                return rowLokZdjRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjRow FindByID(int ID) {
                return ((LokZdjRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LokZdjDataTable cln = ((LokZdjDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LokZdjDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIDPDB = base.Columns["IDPDB"];
                this.columnNazwaObiektu = base.Columns["NazwaObiektu"];
                this.columnKraj = base.Columns["Kraj"];
                this.columnMiejscowość = base.Columns["Miejscowość"];
                this.columnRegion = base.Columns["Region"];
                this.columnPora_roku = base.Columns["Pora roku"];
                this.columnData = base.Columns["Data"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIDPDB = new global::System.Data.DataColumn("IDPDB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPDB);
                this.columnNazwaObiektu = new global::System.Data.DataColumn("NazwaObiektu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNazwaObiektu);
                this.columnKraj = new global::System.Data.DataColumn("Kraj", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKraj);
                this.columnMiejscowość = new global::System.Data.DataColumn("Miejscowość", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiejscowość);
                this.columnRegion = new global::System.Data.DataColumn("Region", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegion);
                this.columnPora_roku = new global::System.Data.DataColumn("Pora roku", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPora_roku);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnIDPDB.AllowDBNull = false;
                this.columnNazwaObiektu.Caption = "Nazwa Obiektu";
                this.columnNazwaObiektu.MaxLength = 100;
                this.columnKraj.MaxLength = 100;
                this.columnMiejscowość.MaxLength = 100;
                this.columnRegion.MaxLength = 100;
                this.columnPora_roku.MaxLength = 100;
                this.columnData.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjRow NewLokZdjRow() {
                return ((LokZdjRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LokZdjRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LokZdjRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LokZdjRowChanged != null)) {
                    this.LokZdjRowChanged(this, new LokZdjRowChangeEvent(((LokZdjRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LokZdjRowChanging != null)) {
                    this.LokZdjRowChanging(this, new LokZdjRowChangeEvent(((LokZdjRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LokZdjRowDeleted != null)) {
                    this.LokZdjRowDeleted(this, new LokZdjRowChangeEvent(((LokZdjRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LokZdjRowDeleting != null)) {
                    this.LokZdjRowDeleting(this, new LokZdjRowChangeEvent(((LokZdjRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLokZdjRow(LokZdjRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LokZdjDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ObsadaDataTable : global::System.Data.TypedTableBase<ObsadaRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnImieNazw;
            
            private global::System.Data.DataColumn columnRola;
            
            private global::System.Data.DataColumn columnIDPDB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaDataTable() {
                this.TableName = "Obsada";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObsadaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ObsadaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImieNazwColumn {
                get {
                    return this.columnImieNazw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RolaColumn {
                get {
                    return this.columnRola;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPDBColumn {
                get {
                    return this.columnIDPDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaRow this[int index] {
                get {
                    return ((ObsadaRow)(this.Rows[index]));
                }
            }
            
            public event ObsadaRowChangeEventHandler ObsadaRowChanging;
            
            public event ObsadaRowChangeEventHandler ObsadaRowChanged;
            
            public event ObsadaRowChangeEventHandler ObsadaRowDeleting;
            
            public event ObsadaRowChangeEventHandler ObsadaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddObsadaRow(ObsadaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaRow AddObsadaRow(string ImieNazw, string Rola, FilmRow parentFilmRowByFK_Film_Obsada) {
                ObsadaRow rowObsadaRow = ((ObsadaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ImieNazw,
                        Rola,
                        null};
                if ((parentFilmRowByFK_Film_Obsada != null)) {
                    columnValuesArray[3] = parentFilmRowByFK_Film_Obsada[0];
                }
                rowObsadaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowObsadaRow);
                return rowObsadaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaRow FindByID(int ID) {
                return ((ObsadaRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ObsadaDataTable cln = ((ObsadaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ObsadaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnImieNazw = base.Columns["ImieNazw"];
                this.columnRola = base.Columns["Rola"];
                this.columnIDPDB = base.Columns["IDPDB"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnImieNazw = new global::System.Data.DataColumn("ImieNazw", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImieNazw);
                this.columnRola = new global::System.Data.DataColumn("Rola", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRola);
                this.columnIDPDB = new global::System.Data.DataColumn("IDPDB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPDB);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnImieNazw.Caption = "Imię i Nazwisko";
                this.columnImieNazw.MaxLength = 200;
                this.columnRola.MaxLength = 200;
                this.columnIDPDB.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaRow NewObsadaRow() {
                return ((ObsadaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ObsadaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ObsadaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ObsadaRowChanged != null)) {
                    this.ObsadaRowChanged(this, new ObsadaRowChangeEvent(((ObsadaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ObsadaRowChanging != null)) {
                    this.ObsadaRowChanging(this, new ObsadaRowChangeEvent(((ObsadaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ObsadaRowDeleted != null)) {
                    this.ObsadaRowDeleted(this, new ObsadaRowChangeEvent(((ObsadaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ObsadaRowDeleting != null)) {
                    this.ObsadaRowDeleting(this, new ObsadaRowChangeEvent(((ObsadaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveObsadaRow(ObsadaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ObsadaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OcenaDataTable : global::System.Data.TypedTableBase<OcenaRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNazwa;
            
            private global::System.Data.DataColumn columnTytul;
            
            private global::System.Data.DataColumn columnAutor;
            
            private global::System.Data.DataColumn columnWWW;
            
            private global::System.Data.DataColumn columnOcena;
            
            private global::System.Data.DataColumn columnIDPDB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaDataTable() {
                this.TableName = "Ocena";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OcenaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OcenaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NazwaColumn {
                get {
                    return this.columnNazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TytulColumn {
                get {
                    return this.columnTytul;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutorColumn {
                get {
                    return this.columnAutor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WWWColumn {
                get {
                    return this.columnWWW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OcenaColumn {
                get {
                    return this.columnOcena;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPDBColumn {
                get {
                    return this.columnIDPDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaRow this[int index] {
                get {
                    return ((OcenaRow)(this.Rows[index]));
                }
            }
            
            public event OcenaRowChangeEventHandler OcenaRowChanging;
            
            public event OcenaRowChangeEventHandler OcenaRowChanged;
            
            public event OcenaRowChangeEventHandler OcenaRowDeleting;
            
            public event OcenaRowChangeEventHandler OcenaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOcenaRow(OcenaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaRow AddOcenaRow(string Nazwa, string Tytul, string Autor, string WWW, string Ocena, FilmRow parentFilmRowByFK_Film_Ocena) {
                OcenaRow rowOcenaRow = ((OcenaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Nazwa,
                        Tytul,
                        Autor,
                        WWW,
                        Ocena,
                        null};
                if ((parentFilmRowByFK_Film_Ocena != null)) {
                    columnValuesArray[6] = parentFilmRowByFK_Film_Ocena[0];
                }
                rowOcenaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOcenaRow);
                return rowOcenaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaRow FindByID(int ID) {
                return ((OcenaRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OcenaDataTable cln = ((OcenaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OcenaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNazwa = base.Columns["Nazwa"];
                this.columnTytul = base.Columns["Tytul"];
                this.columnAutor = base.Columns["Autor"];
                this.columnWWW = base.Columns["WWW"];
                this.columnOcena = base.Columns["Ocena"];
                this.columnIDPDB = base.Columns["IDPDB"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNazwa = new global::System.Data.DataColumn("Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNazwa);
                this.columnTytul = new global::System.Data.DataColumn("Tytul", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTytul);
                this.columnAutor = new global::System.Data.DataColumn("Autor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutor);
                this.columnWWW = new global::System.Data.DataColumn("WWW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWWW);
                this.columnOcena = new global::System.Data.DataColumn("Ocena", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOcena);
                this.columnIDPDB = new global::System.Data.DataColumn("IDPDB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPDB);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNazwa.MaxLength = 100;
                this.columnTytul.MaxLength = 100;
                this.columnAutor.MaxLength = 100;
                this.columnWWW.MaxLength = 100;
                this.columnOcena.MaxLength = 100;
                this.columnIDPDB.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaRow NewOcenaRow() {
                return ((OcenaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OcenaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OcenaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OcenaRowChanged != null)) {
                    this.OcenaRowChanged(this, new OcenaRowChangeEvent(((OcenaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OcenaRowChanging != null)) {
                    this.OcenaRowChanging(this, new OcenaRowChangeEvent(((OcenaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OcenaRowDeleted != null)) {
                    this.OcenaRowDeleted(this, new OcenaRowChangeEvent(((OcenaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OcenaRowDeleting != null)) {
                    this.OcenaRowDeleting(this, new OcenaRowChangeEvent(((OcenaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOcenaRow(OcenaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OcenaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProdukcjaDataTable : global::System.Data.TypedTableBase<ProdukcjaRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIDPDB;
            
            private global::System.Data.DataColumn columnNazwa;
            
            private global::System.Data.DataColumn columnAdres;
            
            private global::System.Data.DataColumn columnTel;
            
            private global::System.Data.DataColumn columnFax;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnWWW;
            
            private global::System.Data.DataColumn columnNarodowość;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaDataTable() {
                this.TableName = "Produkcja";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProdukcjaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProdukcjaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPDBColumn {
                get {
                    return this.columnIDPDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NazwaColumn {
                get {
                    return this.columnNazwa;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdresColumn {
                get {
                    return this.columnAdres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelColumn {
                get {
                    return this.columnTel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WWWColumn {
                get {
                    return this.columnWWW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NarodowośćColumn {
                get {
                    return this.columnNarodowość;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaRow this[int index] {
                get {
                    return ((ProdukcjaRow)(this.Rows[index]));
                }
            }
            
            public event ProdukcjaRowChangeEventHandler ProdukcjaRowChanging;
            
            public event ProdukcjaRowChangeEventHandler ProdukcjaRowChanged;
            
            public event ProdukcjaRowChangeEventHandler ProdukcjaRowDeleting;
            
            public event ProdukcjaRowChangeEventHandler ProdukcjaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProdukcjaRow(ProdukcjaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaRow AddProdukcjaRow(FilmRow parentFilmRowByFK_Film_Produkcja, string Nazwa, string Adres, string Tel, string Fax, string Email, string WWW, string Narodowość) {
                ProdukcjaRow rowProdukcjaRow = ((ProdukcjaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Nazwa,
                        Adres,
                        Tel,
                        Fax,
                        Email,
                        WWW,
                        Narodowość};
                if ((parentFilmRowByFK_Film_Produkcja != null)) {
                    columnValuesArray[1] = parentFilmRowByFK_Film_Produkcja[0];
                }
                rowProdukcjaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProdukcjaRow);
                return rowProdukcjaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaRow FindByID(int ID) {
                return ((ProdukcjaRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProdukcjaDataTable cln = ((ProdukcjaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProdukcjaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIDPDB = base.Columns["IDPDB"];
                this.columnNazwa = base.Columns["Nazwa"];
                this.columnAdres = base.Columns["Adres"];
                this.columnTel = base.Columns["Tel"];
                this.columnFax = base.Columns["Fax"];
                this.columnEmail = base.Columns["Email"];
                this.columnWWW = base.Columns["WWW"];
                this.columnNarodowość = base.Columns["Narodowość"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIDPDB = new global::System.Data.DataColumn("IDPDB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPDB);
                this.columnNazwa = new global::System.Data.DataColumn("Nazwa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNazwa);
                this.columnAdres = new global::System.Data.DataColumn("Adres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdres);
                this.columnTel = new global::System.Data.DataColumn("Tel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTel);
                this.columnFax = new global::System.Data.DataColumn("Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnWWW = new global::System.Data.DataColumn("WWW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWWW);
                this.columnNarodowość = new global::System.Data.DataColumn("Narodowość", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNarodowość);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnIDPDB.AllowDBNull = false;
                this.columnNazwa.MaxLength = 100;
                this.columnAdres.MaxLength = 100;
                this.columnTel.MaxLength = 100;
                this.columnFax.MaxLength = 100;
                this.columnEmail.MaxLength = 100;
                this.columnWWW.MaxLength = 100;
                this.columnNarodowość.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaRow NewProdukcjaRow() {
                return ((ProdukcjaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProdukcjaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProdukcjaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProdukcjaRowChanged != null)) {
                    this.ProdukcjaRowChanged(this, new ProdukcjaRowChangeEvent(((ProdukcjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProdukcjaRowChanging != null)) {
                    this.ProdukcjaRowChanging(this, new ProdukcjaRowChangeEvent(((ProdukcjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProdukcjaRowDeleted != null)) {
                    this.ProdukcjaRowDeleted(this, new ProdukcjaRowChangeEvent(((ProdukcjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProdukcjaRowDeleting != null)) {
                    this.ProdukcjaRowDeleting(this, new ProdukcjaRowChangeEvent(((ProdukcjaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProdukcjaRow(ProdukcjaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProdukcjaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WYPINDataTable : global::System.Data.TypedTableBase<WYPINRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIDPDB;
            
            private global::System.Data.DataColumn columnDataWyp;
            
            private global::System.Data.DataColumn columnDataOdd;
            
            private global::System.Data.DataColumn columnOsoba;
            
            private global::System.Data.DataColumn columnStanPWyp;
            
            private global::System.Data.DataColumn columnStanPOdd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINDataTable() {
                this.TableName = "WYPIN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WYPINDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WYPINDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPDBColumn {
                get {
                    return this.columnIDPDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataWypColumn {
                get {
                    return this.columnDataWyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataOddColumn {
                get {
                    return this.columnDataOdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OsobaColumn {
                get {
                    return this.columnOsoba;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StanPWypColumn {
                get {
                    return this.columnStanPWyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StanPOddColumn {
                get {
                    return this.columnStanPOdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINRow this[int index] {
                get {
                    return ((WYPINRow)(this.Rows[index]));
                }
            }
            
            public event WYPINRowChangeEventHandler WYPINRowChanging;
            
            public event WYPINRowChangeEventHandler WYPINRowChanged;
            
            public event WYPINRowChangeEventHandler WYPINRowDeleting;
            
            public event WYPINRowChangeEventHandler WYPINRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWYPINRow(WYPINRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINRow AddWYPINRow(FilmRow parentFilmRowByFK_Film_WYPIN, string DataWyp, string DataOdd, string Osoba, string StanPWyp, string StanPOdd) {
                WYPINRow rowWYPINRow = ((WYPINRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DataWyp,
                        DataOdd,
                        Osoba,
                        StanPWyp,
                        StanPOdd};
                if ((parentFilmRowByFK_Film_WYPIN != null)) {
                    columnValuesArray[1] = parentFilmRowByFK_Film_WYPIN[0];
                }
                rowWYPINRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWYPINRow);
                return rowWYPINRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINRow FindByID(int ID) {
                return ((WYPINRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WYPINDataTable cln = ((WYPINDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WYPINDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIDPDB = base.Columns["IDPDB"];
                this.columnDataWyp = base.Columns["DataWyp"];
                this.columnDataOdd = base.Columns["DataOdd"];
                this.columnOsoba = base.Columns["Osoba"];
                this.columnStanPWyp = base.Columns["StanPWyp"];
                this.columnStanPOdd = base.Columns["StanPOdd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIDPDB = new global::System.Data.DataColumn("IDPDB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPDB);
                this.columnDataWyp = new global::System.Data.DataColumn("DataWyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataWyp);
                this.columnDataOdd = new global::System.Data.DataColumn("DataOdd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataOdd);
                this.columnOsoba = new global::System.Data.DataColumn("Osoba", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOsoba);
                this.columnStanPWyp = new global::System.Data.DataColumn("StanPWyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStanPWyp);
                this.columnStanPOdd = new global::System.Data.DataColumn("StanPOdd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStanPOdd);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnIDPDB.AllowDBNull = false;
                this.columnDataWyp.Caption = "Data Wypożyczenia";
                this.columnDataWyp.MaxLength = 100;
                this.columnDataOdd.Caption = "Data Oddania";
                this.columnDataOdd.MaxLength = 100;
                this.columnOsoba.MaxLength = 100;
                this.columnStanPWyp.Caption = "Stan przed wypożyczeniem";
                this.columnStanPWyp.MaxLength = 100;
                this.columnStanPOdd.Caption = "Stan po oddaniu";
                this.columnStanPOdd.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINRow NewWYPINRow() {
                return ((WYPINRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WYPINRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WYPINRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WYPINRowChanged != null)) {
                    this.WYPINRowChanged(this, new WYPINRowChangeEvent(((WYPINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WYPINRowChanging != null)) {
                    this.WYPINRowChanging(this, new WYPINRowChangeEvent(((WYPINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WYPINRowDeleted != null)) {
                    this.WYPINRowDeleted(this, new WYPINRowChangeEvent(((WYPINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WYPINRowDeleting != null)) {
                    this.WYPINRowDeleting(this, new WYPINRowChangeEvent(((WYPINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWYPINRow(WYPINRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WYPINDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WYPODINDataTable : global::System.Data.TypedTableBase<WYPODINRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIDPDB;
            
            private global::System.Data.DataColumn columnDataWyp;
            
            private global::System.Data.DataColumn columnDataOdd;
            
            private global::System.Data.DataColumn columnOsoba;
            
            private global::System.Data.DataColumn columnStanPWyp;
            
            private global::System.Data.DataColumn columnStanPOdd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINDataTable() {
                this.TableName = "WYPODIN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WYPODINDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WYPODINDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDPDBColumn {
                get {
                    return this.columnIDPDB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataWypColumn {
                get {
                    return this.columnDataWyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataOddColumn {
                get {
                    return this.columnDataOdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OsobaColumn {
                get {
                    return this.columnOsoba;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StanPWypColumn {
                get {
                    return this.columnStanPWyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StanPOddColumn {
                get {
                    return this.columnStanPOdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINRow this[int index] {
                get {
                    return ((WYPODINRow)(this.Rows[index]));
                }
            }
            
            public event WYPODINRowChangeEventHandler WYPODINRowChanging;
            
            public event WYPODINRowChangeEventHandler WYPODINRowChanged;
            
            public event WYPODINRowChangeEventHandler WYPODINRowDeleting;
            
            public event WYPODINRowChangeEventHandler WYPODINRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWYPODINRow(WYPODINRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINRow AddWYPODINRow(FilmRow parentFilmRowByFK_Film_WYPODIN, string DataWyp, string DataOdd, string Osoba, string StanPWyp, string StanPOdd) {
                WYPODINRow rowWYPODINRow = ((WYPODINRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DataWyp,
                        DataOdd,
                        Osoba,
                        StanPWyp,
                        StanPOdd};
                if ((parentFilmRowByFK_Film_WYPODIN != null)) {
                    columnValuesArray[1] = parentFilmRowByFK_Film_WYPODIN[0];
                }
                rowWYPODINRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWYPODINRow);
                return rowWYPODINRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINRow FindByID(int ID) {
                return ((WYPODINRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WYPODINDataTable cln = ((WYPODINDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WYPODINDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIDPDB = base.Columns["IDPDB"];
                this.columnDataWyp = base.Columns["DataWyp"];
                this.columnDataOdd = base.Columns["DataOdd"];
                this.columnOsoba = base.Columns["Osoba"];
                this.columnStanPWyp = base.Columns["StanPWyp"];
                this.columnStanPOdd = base.Columns["StanPOdd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIDPDB = new global::System.Data.DataColumn("IDPDB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDPDB);
                this.columnDataWyp = new global::System.Data.DataColumn("DataWyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataWyp);
                this.columnDataOdd = new global::System.Data.DataColumn("DataOdd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataOdd);
                this.columnOsoba = new global::System.Data.DataColumn("Osoba", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOsoba);
                this.columnStanPWyp = new global::System.Data.DataColumn("StanPWyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStanPWyp);
                this.columnStanPOdd = new global::System.Data.DataColumn("StanPOdd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStanPOdd);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnIDPDB.AllowDBNull = false;
                this.columnDataWyp.Caption = "Data Wypożyczenia";
                this.columnDataWyp.MaxLength = 100;
                this.columnDataOdd.Caption = "Data oddania";
                this.columnDataOdd.MaxLength = 100;
                this.columnOsoba.MaxLength = 100;
                this.columnStanPWyp.Caption = "Stan przed wypożyczeniem";
                this.columnStanPWyp.MaxLength = 100;
                this.columnStanPOdd.Caption = "Stan po oddaniu";
                this.columnStanPOdd.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINRow NewWYPODINRow() {
                return ((WYPODINRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WYPODINRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WYPODINRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WYPODINRowChanged != null)) {
                    this.WYPODINRowChanged(this, new WYPODINRowChangeEvent(((WYPODINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WYPODINRowChanging != null)) {
                    this.WYPODINRowChanging(this, new WYPODINRowChangeEvent(((WYPODINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WYPODINRowDeleted != null)) {
                    this.WYPODINRowDeleted(this, new WYPODINRowChangeEvent(((WYPODINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WYPODINRowDeleting != null)) {
                    this.WYPODINRowDeleting(this, new WYPODINRowChangeEvent(((WYPODINRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWYPODINRow(WYPODINRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                defaultDataSet ds = new defaultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WYPODINDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DystrybucjaRow : global::System.Data.DataRow {
            
            private DystrybucjaDataTable tableDystrybucja;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DystrybucjaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDystrybucja = ((DystrybucjaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableDystrybucja.IDColumn]));
                }
                set {
                    this[this.tableDystrybucja.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPDB {
                get {
                    return ((int)(this[this.tableDystrybucja.IDPDBColumn]));
                }
                set {
                    this[this.tableDystrybucja.IDPDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nazwa {
                get {
                    if (this.IsNazwaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDystrybucja.NazwaColumn]));
                    }
                }
                set {
                    this[this.tableDystrybucja.NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adres {
                get {
                    if (this.IsAdresNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDystrybucja.AdresColumn]));
                    }
                }
                set {
                    this[this.tableDystrybucja.AdresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tel {
                get {
                    if (this.IsTelNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDystrybucja.TelColumn]));
                    }
                }
                set {
                    this[this.tableDystrybucja.TelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fax {
                get {
                    if (this.IsFaxNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDystrybucja.FaxColumn]));
                    }
                }
                set {
                    this[this.tableDystrybucja.FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    if (this.IsEmailNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDystrybucja.EmailColumn]));
                    }
                }
                set {
                    this[this.tableDystrybucja.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WWW {
                get {
                    if (this.IsWWWNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDystrybucja.WWWColumn]));
                    }
                }
                set {
                    this[this.tableDystrybucja.WWWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Narodowość {
                get {
                    if (this.IsNarodowośćNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDystrybucja.NarodowośćColumn]));
                    }
                }
                set {
                    this[this.tableDystrybucja.NarodowośćColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FilmRow {
                get {
                    return ((FilmRow)(this.GetParentRow(this.Table.ParentRelations["FK_Film_Dystrybucja"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Film_Dystrybucja"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNazwaNull() {
                return this.IsNull(this.tableDystrybucja.NazwaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNazwaNull() {
                this[this.tableDystrybucja.NazwaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdresNull() {
                return this.IsNull(this.tableDystrybucja.AdresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdresNull() {
                this[this.tableDystrybucja.AdresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelNull() {
                return this.IsNull(this.tableDystrybucja.TelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelNull() {
                this[this.tableDystrybucja.TelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFaxNull() {
                return this.IsNull(this.tableDystrybucja.FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFaxNull() {
                this[this.tableDystrybucja.FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableDystrybucja.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableDystrybucja.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWWWNull() {
                return this.IsNull(this.tableDystrybucja.WWWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWWWNull() {
                this[this.tableDystrybucja.WWWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNarodowośćNull() {
                return this.IsNull(this.tableDystrybucja.NarodowośćColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNarodowośćNull() {
                this[this.tableDystrybucja.NarodowośćColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FilmRow : global::System.Data.DataRow {
            
            private FilmDataTable tableFilm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FilmRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFilm = ((FilmDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableFilm.IDColumn]));
                }
                set {
                    this[this.tableFilm.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tytul {
                get {
                    if (this.IsTytulNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.TytulColumn]));
                    }
                }
                set {
                    this[this.tableFilm.TytulColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TytulOrig {
                get {
                    if (this.IsTytulOrigNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.TytulOrigColumn]));
                    }
                }
                set {
                    this[this.tableFilm.TytulOrigColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gatunek {
                get {
                    if (this.IsGatunekNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.GatunekColumn]));
                    }
                }
                set {
                    this[this.tableFilm.GatunekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Opis {
                get {
                    if (this.IsOpisNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.OpisColumn]));
                    }
                }
                set {
                    this[this.tableFilm.OpisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pathtofront {
                get {
                    if (this.IspathtofrontNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.pathtofrontColumn]));
                    }
                }
                set {
                    this[this.tableFilm.pathtofrontColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pathtoback {
                get {
                    if (this.IspathtobackNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.pathtobackColumn]));
                    }
                }
                set {
                    this[this.tableFilm.pathtobackColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OW_SD {
                get {
                    if (this.IsOW_SDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.OW_SDColumn]));
                    }
                }
                set {
                    this[this.tableFilm.OW_SDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OW_Obs {
                get {
                    if (this.IsOW_ObsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.OW_ObsColumn]));
                    }
                }
                set {
                    this[this.tableFilm.OW_ObsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OW_Zdj {
                get {
                    if (this.IsOW_ZdjNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.OW_ZdjColumn]));
                    }
                }
                set {
                    this[this.tableFilm.OW_ZdjColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OW_Wart {
                get {
                    if (this.IsOW_WartNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.OW_WartColumn]));
                    }
                }
                set {
                    this[this.tableFilm.OW_WartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OW_ALL {
                get {
                    if (this.IsOW_ALLNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.OW_ALLColumn]));
                    }
                }
                set {
                    this[this.tableFilm.OW_ALLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_Imie {
                get {
                    if (this.IsDOE_ImieNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_ImieColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_ImieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_Nazw {
                get {
                    if (this.IsDOE_NazwNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_NazwColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_NazwColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_Adres {
                get {
                    if (this.IsDOE_AdresNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_AdresColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_AdresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_MN_Nazwa {
                get {
                    if (this.IsDOE_MN_NazwaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_MN_NazwaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_MN_NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_MN_Adres {
                get {
                    if (this.IsDOE_MN_AdresNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_MN_AdresColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_MN_AdresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_MN_WWW {
                get {
                    if (this.IsDOE_MN_WWWNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_MN_WWWColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_MN_WWWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_MN_Tel {
                get {
                    if (this.IsDOE_MN_TelNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_MN_TelColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_MN_TelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_MN_Fax {
                get {
                    if (this.IsDOE_MN_FaxNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_MN_FaxColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_MN_FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_MN_Email {
                get {
                    if (this.IsDOE_MN_EmailNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_MN_EmailColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_MN_EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_Cena {
                get {
                    if (this.IsDOE_CenaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_CenaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_CenaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_DataSkat {
                get {
                    if (this.IsDOE_DataSkatNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_DataSkatColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_DataSkatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_DataUtr {
                get {
                    if (this.IsDOE_DataUtrNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_DataUtrColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_DataUtrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_NrKat {
                get {
                    if (this.IsDOE_NrKatNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_NrKatColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_NrKatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_WartAkt {
                get {
                    if (this.IsDOE_WartAktNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_WartAktColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_WartAktColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_DataZak {
                get {
                    if (this.IsDOE_DataZakNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_DataZakColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_DataZakColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOE_Nośnik {
                get {
                    if (this.IsDOE_NośnikNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.DOE_NośnikColumn]));
                    }
                }
                set {
                    this[this.tableFilm.DOE_NośnikColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_RokProd {
                get {
                    if (this.IsIOF_RokProdNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_RokProdColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_RokProdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_DataPrem {
                get {
                    if (this.IsIOF_DataPremNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_DataPremColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_DataPremColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_CzasProj {
                get {
                    if (this.IsIOF_CzasProjNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_CzasProjColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_CzasProjColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_FormWysw {
                get {
                    if (this.IsIOF_FormWyswNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_FormWyswColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_FormWyswColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_SysKodObr {
                get {
                    if (this.IsIOF_SysKodObrNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_SysKodObrColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_SysKodObrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_JezykLekt {
                get {
                    if (this.IsIOF_JezykLektNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_JezykLektColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_JezykLektColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_JezykNap {
                get {
                    if (this.IsIOF_JezykNapNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_JezykNapColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_JezykNapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_KW_Nazwa {
                get {
                    if (this.IsIOF_KW_NazwaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_KW_NazwaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_KW_NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_KW_Typ {
                get {
                    if (this.IsIOF_KW_TypNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_KW_TypColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_KW_TypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_KW_Wersja {
                get {
                    if (this.IsIOF_KW_WersjaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_KW_WersjaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_KW_WersjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_KA_Nazwa {
                get {
                    if (this.IsIOF_KA_NazwaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_KA_NazwaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_KA_NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_KA_Typ {
                get {
                    if (this.IsIOF_KA_TypNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_KA_TypColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_KA_TypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_KA_Wersja {
                get {
                    if (this.IsIOF_KA_WersjaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_KA_WersjaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_KA_WersjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_ZAB_Nazwa {
                get {
                    if (this.IsIOF_ZAB_NazwaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_ZAB_NazwaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_ZAB_NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_ZAB_Typ {
                get {
                    if (this.IsIOF_ZAB_TypNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_ZAB_TypColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_ZAB_TypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_ZAB_Wersja {
                get {
                    if (this.IsIOF_ZAB_WersjaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_ZAB_WersjaColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_ZAB_WersjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IOF_KrajProd {
                get {
                    if (this.IsIOF_KrajProdNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFilm.IOF_KrajProdColumn]));
                    }
                }
                set {
                    this[this.tableFilm.IOF_KrajProdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTytulNull() {
                return this.IsNull(this.tableFilm.TytulColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTytulNull() {
                this[this.tableFilm.TytulColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTytulOrigNull() {
                return this.IsNull(this.tableFilm.TytulOrigColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTytulOrigNull() {
                this[this.tableFilm.TytulOrigColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGatunekNull() {
                return this.IsNull(this.tableFilm.GatunekColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGatunekNull() {
                this[this.tableFilm.GatunekColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpisNull() {
                return this.IsNull(this.tableFilm.OpisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpisNull() {
                this[this.tableFilm.OpisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspathtofrontNull() {
                return this.IsNull(this.tableFilm.pathtofrontColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpathtofrontNull() {
                this[this.tableFilm.pathtofrontColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspathtobackNull() {
                return this.IsNull(this.tableFilm.pathtobackColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpathtobackNull() {
                this[this.tableFilm.pathtobackColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOW_SDNull() {
                return this.IsNull(this.tableFilm.OW_SDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOW_SDNull() {
                this[this.tableFilm.OW_SDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOW_ObsNull() {
                return this.IsNull(this.tableFilm.OW_ObsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOW_ObsNull() {
                this[this.tableFilm.OW_ObsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOW_ZdjNull() {
                return this.IsNull(this.tableFilm.OW_ZdjColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOW_ZdjNull() {
                this[this.tableFilm.OW_ZdjColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOW_WartNull() {
                return this.IsNull(this.tableFilm.OW_WartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOW_WartNull() {
                this[this.tableFilm.OW_WartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOW_ALLNull() {
                return this.IsNull(this.tableFilm.OW_ALLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOW_ALLNull() {
                this[this.tableFilm.OW_ALLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_ImieNull() {
                return this.IsNull(this.tableFilm.DOE_ImieColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_ImieNull() {
                this[this.tableFilm.DOE_ImieColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_NazwNull() {
                return this.IsNull(this.tableFilm.DOE_NazwColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_NazwNull() {
                this[this.tableFilm.DOE_NazwColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_AdresNull() {
                return this.IsNull(this.tableFilm.DOE_AdresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_AdresNull() {
                this[this.tableFilm.DOE_AdresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_MN_NazwaNull() {
                return this.IsNull(this.tableFilm.DOE_MN_NazwaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_MN_NazwaNull() {
                this[this.tableFilm.DOE_MN_NazwaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_MN_AdresNull() {
                return this.IsNull(this.tableFilm.DOE_MN_AdresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_MN_AdresNull() {
                this[this.tableFilm.DOE_MN_AdresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_MN_WWWNull() {
                return this.IsNull(this.tableFilm.DOE_MN_WWWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_MN_WWWNull() {
                this[this.tableFilm.DOE_MN_WWWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_MN_TelNull() {
                return this.IsNull(this.tableFilm.DOE_MN_TelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_MN_TelNull() {
                this[this.tableFilm.DOE_MN_TelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_MN_FaxNull() {
                return this.IsNull(this.tableFilm.DOE_MN_FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_MN_FaxNull() {
                this[this.tableFilm.DOE_MN_FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_MN_EmailNull() {
                return this.IsNull(this.tableFilm.DOE_MN_EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_MN_EmailNull() {
                this[this.tableFilm.DOE_MN_EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_CenaNull() {
                return this.IsNull(this.tableFilm.DOE_CenaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_CenaNull() {
                this[this.tableFilm.DOE_CenaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_DataSkatNull() {
                return this.IsNull(this.tableFilm.DOE_DataSkatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_DataSkatNull() {
                this[this.tableFilm.DOE_DataSkatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_DataUtrNull() {
                return this.IsNull(this.tableFilm.DOE_DataUtrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_DataUtrNull() {
                this[this.tableFilm.DOE_DataUtrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_NrKatNull() {
                return this.IsNull(this.tableFilm.DOE_NrKatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_NrKatNull() {
                this[this.tableFilm.DOE_NrKatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_WartAktNull() {
                return this.IsNull(this.tableFilm.DOE_WartAktColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_WartAktNull() {
                this[this.tableFilm.DOE_WartAktColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_DataZakNull() {
                return this.IsNull(this.tableFilm.DOE_DataZakColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_DataZakNull() {
                this[this.tableFilm.DOE_DataZakColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOE_NośnikNull() {
                return this.IsNull(this.tableFilm.DOE_NośnikColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOE_NośnikNull() {
                this[this.tableFilm.DOE_NośnikColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_RokProdNull() {
                return this.IsNull(this.tableFilm.IOF_RokProdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_RokProdNull() {
                this[this.tableFilm.IOF_RokProdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_DataPremNull() {
                return this.IsNull(this.tableFilm.IOF_DataPremColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_DataPremNull() {
                this[this.tableFilm.IOF_DataPremColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_CzasProjNull() {
                return this.IsNull(this.tableFilm.IOF_CzasProjColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_CzasProjNull() {
                this[this.tableFilm.IOF_CzasProjColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_FormWyswNull() {
                return this.IsNull(this.tableFilm.IOF_FormWyswColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_FormWyswNull() {
                this[this.tableFilm.IOF_FormWyswColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_SysKodObrNull() {
                return this.IsNull(this.tableFilm.IOF_SysKodObrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_SysKodObrNull() {
                this[this.tableFilm.IOF_SysKodObrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_JezykLektNull() {
                return this.IsNull(this.tableFilm.IOF_JezykLektColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_JezykLektNull() {
                this[this.tableFilm.IOF_JezykLektColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_JezykNapNull() {
                return this.IsNull(this.tableFilm.IOF_JezykNapColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_JezykNapNull() {
                this[this.tableFilm.IOF_JezykNapColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_KW_NazwaNull() {
                return this.IsNull(this.tableFilm.IOF_KW_NazwaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_KW_NazwaNull() {
                this[this.tableFilm.IOF_KW_NazwaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_KW_TypNull() {
                return this.IsNull(this.tableFilm.IOF_KW_TypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_KW_TypNull() {
                this[this.tableFilm.IOF_KW_TypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_KW_WersjaNull() {
                return this.IsNull(this.tableFilm.IOF_KW_WersjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_KW_WersjaNull() {
                this[this.tableFilm.IOF_KW_WersjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_KA_NazwaNull() {
                return this.IsNull(this.tableFilm.IOF_KA_NazwaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_KA_NazwaNull() {
                this[this.tableFilm.IOF_KA_NazwaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_KA_TypNull() {
                return this.IsNull(this.tableFilm.IOF_KA_TypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_KA_TypNull() {
                this[this.tableFilm.IOF_KA_TypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_KA_WersjaNull() {
                return this.IsNull(this.tableFilm.IOF_KA_WersjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_KA_WersjaNull() {
                this[this.tableFilm.IOF_KA_WersjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_ZAB_NazwaNull() {
                return this.IsNull(this.tableFilm.IOF_ZAB_NazwaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_ZAB_NazwaNull() {
                this[this.tableFilm.IOF_ZAB_NazwaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_ZAB_TypNull() {
                return this.IsNull(this.tableFilm.IOF_ZAB_TypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_ZAB_TypNull() {
                this[this.tableFilm.IOF_ZAB_TypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_ZAB_WersjaNull() {
                return this.IsNull(this.tableFilm.IOF_ZAB_WersjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_ZAB_WersjaNull() {
                this[this.tableFilm.IOF_ZAB_WersjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIOF_KrajProdNull() {
                return this.IsNull(this.tableFilm.IOF_KrajProdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIOF_KrajProdNull() {
                this[this.tableFilm.IOF_KrajProdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINRow[] GetWYPODINRows() {
                if ((this.Table.ChildRelations["FK_Film_WYPODIN"] == null)) {
                    return new WYPODINRow[0];
                }
                else {
                    return ((WYPODINRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Film_WYPODIN"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINRow[] GetWYPINRows() {
                if ((this.Table.ChildRelations["FK_Film_WYPIN"] == null)) {
                    return new WYPINRow[0];
                }
                else {
                    return ((WYPINRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Film_WYPIN"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaRow[] GetProdukcjaRows() {
                if ((this.Table.ChildRelations["FK_Film_Produkcja"] == null)) {
                    return new ProdukcjaRow[0];
                }
                else {
                    return ((ProdukcjaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Film_Produkcja"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaRow[] GetOcenaRows() {
                if ((this.Table.ChildRelations["FK_Film_Ocena"] == null)) {
                    return new OcenaRow[0];
                }
                else {
                    return ((OcenaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Film_Ocena"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaRow[] GetObsadaRows() {
                if ((this.Table.ChildRelations["FK_Film_Obsada"] == null)) {
                    return new ObsadaRow[0];
                }
                else {
                    return ((ObsadaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Film_Obsada"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjRow[] GetLokZdjRows() {
                if ((this.Table.ChildRelations["FK_Film_LokZdj"] == null)) {
                    return new LokZdjRow[0];
                }
                else {
                    return ((LokZdjRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Film_LokZdj"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaRow[] GetDystrybucjaRows() {
                if ((this.Table.ChildRelations["FK_Film_Dystrybucja"] == null)) {
                    return new DystrybucjaRow[0];
                }
                else {
                    return ((DystrybucjaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Film_Dystrybucja"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LokZdjRow : global::System.Data.DataRow {
            
            private LokZdjDataTable tableLokZdj;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LokZdjRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLokZdj = ((LokZdjDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLokZdj.IDColumn]));
                }
                set {
                    this[this.tableLokZdj.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPDB {
                get {
                    return ((int)(this[this.tableLokZdj.IDPDBColumn]));
                }
                set {
                    this[this.tableLokZdj.IDPDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NazwaObiektu {
                get {
                    if (this.IsNazwaObiektuNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLokZdj.NazwaObiektuColumn]));
                    }
                }
                set {
                    this[this.tableLokZdj.NazwaObiektuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Kraj {
                get {
                    if (this.IsKrajNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLokZdj.KrajColumn]));
                    }
                }
                set {
                    this[this.tableLokZdj.KrajColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Miejscowość {
                get {
                    if (this.IsMiejscowośćNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLokZdj.MiejscowośćColumn]));
                    }
                }
                set {
                    this[this.tableLokZdj.MiejscowośćColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Region {
                get {
                    if (this.IsRegionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLokZdj.RegionColumn]));
                    }
                }
                set {
                    this[this.tableLokZdj.RegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pora_roku {
                get {
                    if (this.IsPora_rokuNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLokZdj.Pora_rokuColumn]));
                    }
                }
                set {
                    this[this.tableLokZdj.Pora_rokuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    if (this.IsDataNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLokZdj.DataColumn]));
                    }
                }
                set {
                    this[this.tableLokZdj.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FilmRow {
                get {
                    return ((FilmRow)(this.GetParentRow(this.Table.ParentRelations["FK_Film_LokZdj"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Film_LokZdj"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNazwaObiektuNull() {
                return this.IsNull(this.tableLokZdj.NazwaObiektuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNazwaObiektuNull() {
                this[this.tableLokZdj.NazwaObiektuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKrajNull() {
                return this.IsNull(this.tableLokZdj.KrajColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKrajNull() {
                this[this.tableLokZdj.KrajColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiejscowośćNull() {
                return this.IsNull(this.tableLokZdj.MiejscowośćColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiejscowośćNull() {
                this[this.tableLokZdj.MiejscowośćColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionNull() {
                return this.IsNull(this.tableLokZdj.RegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionNull() {
                this[this.tableLokZdj.RegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPora_rokuNull() {
                return this.IsNull(this.tableLokZdj.Pora_rokuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPora_rokuNull() {
                this[this.tableLokZdj.Pora_rokuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataNull() {
                return this.IsNull(this.tableLokZdj.DataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataNull() {
                this[this.tableLokZdj.DataColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ObsadaRow : global::System.Data.DataRow {
            
            private ObsadaDataTable tableObsada;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObsadaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableObsada = ((ObsadaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableObsada.IDColumn]));
                }
                set {
                    this[this.tableObsada.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImieNazw {
                get {
                    if (this.IsImieNazwNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableObsada.ImieNazwColumn]));
                    }
                }
                set {
                    this[this.tableObsada.ImieNazwColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rola {
                get {
                    if (this.IsRolaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableObsada.RolaColumn]));
                    }
                }
                set {
                    this[this.tableObsada.RolaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPDB {
                get {
                    return ((int)(this[this.tableObsada.IDPDBColumn]));
                }
                set {
                    this[this.tableObsada.IDPDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FilmRow {
                get {
                    return ((FilmRow)(this.GetParentRow(this.Table.ParentRelations["FK_Film_Obsada"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Film_Obsada"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImieNazwNull() {
                return this.IsNull(this.tableObsada.ImieNazwColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImieNazwNull() {
                this[this.tableObsada.ImieNazwColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRolaNull() {
                return this.IsNull(this.tableObsada.RolaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRolaNull() {
                this[this.tableObsada.RolaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OcenaRow : global::System.Data.DataRow {
            
            private OcenaDataTable tableOcena;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OcenaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOcena = ((OcenaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOcena.IDColumn]));
                }
                set {
                    this[this.tableOcena.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nazwa {
                get {
                    if (this.IsNazwaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOcena.NazwaColumn]));
                    }
                }
                set {
                    this[this.tableOcena.NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tytul {
                get {
                    if (this.IsTytulNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOcena.TytulColumn]));
                    }
                }
                set {
                    this[this.tableOcena.TytulColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Autor {
                get {
                    if (this.IsAutorNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOcena.AutorColumn]));
                    }
                }
                set {
                    this[this.tableOcena.AutorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WWW {
                get {
                    if (this.IsWWWNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOcena.WWWColumn]));
                    }
                }
                set {
                    this[this.tableOcena.WWWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ocena {
                get {
                    if (this.IsOcenaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableOcena.OcenaColumn]));
                    }
                }
                set {
                    this[this.tableOcena.OcenaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPDB {
                get {
                    return ((int)(this[this.tableOcena.IDPDBColumn]));
                }
                set {
                    this[this.tableOcena.IDPDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FilmRow {
                get {
                    return ((FilmRow)(this.GetParentRow(this.Table.ParentRelations["FK_Film_Ocena"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Film_Ocena"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNazwaNull() {
                return this.IsNull(this.tableOcena.NazwaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNazwaNull() {
                this[this.tableOcena.NazwaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTytulNull() {
                return this.IsNull(this.tableOcena.TytulColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTytulNull() {
                this[this.tableOcena.TytulColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutorNull() {
                return this.IsNull(this.tableOcena.AutorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutorNull() {
                this[this.tableOcena.AutorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWWWNull() {
                return this.IsNull(this.tableOcena.WWWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWWWNull() {
                this[this.tableOcena.WWWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOcenaNull() {
                return this.IsNull(this.tableOcena.OcenaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOcenaNull() {
                this[this.tableOcena.OcenaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProdukcjaRow : global::System.Data.DataRow {
            
            private ProdukcjaDataTable tableProdukcja;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProdukcjaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProdukcja = ((ProdukcjaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProdukcja.IDColumn]));
                }
                set {
                    this[this.tableProdukcja.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPDB {
                get {
                    return ((int)(this[this.tableProdukcja.IDPDBColumn]));
                }
                set {
                    this[this.tableProdukcja.IDPDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nazwa {
                get {
                    if (this.IsNazwaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProdukcja.NazwaColumn]));
                    }
                }
                set {
                    this[this.tableProdukcja.NazwaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adres {
                get {
                    if (this.IsAdresNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProdukcja.AdresColumn]));
                    }
                }
                set {
                    this[this.tableProdukcja.AdresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tel {
                get {
                    if (this.IsTelNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProdukcja.TelColumn]));
                    }
                }
                set {
                    this[this.tableProdukcja.TelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fax {
                get {
                    if (this.IsFaxNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProdukcja.FaxColumn]));
                    }
                }
                set {
                    this[this.tableProdukcja.FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    if (this.IsEmailNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProdukcja.EmailColumn]));
                    }
                }
                set {
                    this[this.tableProdukcja.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WWW {
                get {
                    if (this.IsWWWNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProdukcja.WWWColumn]));
                    }
                }
                set {
                    this[this.tableProdukcja.WWWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Narodowość {
                get {
                    if (this.IsNarodowośćNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProdukcja.NarodowośćColumn]));
                    }
                }
                set {
                    this[this.tableProdukcja.NarodowośćColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FilmRow {
                get {
                    return ((FilmRow)(this.GetParentRow(this.Table.ParentRelations["FK_Film_Produkcja"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Film_Produkcja"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNazwaNull() {
                return this.IsNull(this.tableProdukcja.NazwaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNazwaNull() {
                this[this.tableProdukcja.NazwaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdresNull() {
                return this.IsNull(this.tableProdukcja.AdresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdresNull() {
                this[this.tableProdukcja.AdresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelNull() {
                return this.IsNull(this.tableProdukcja.TelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelNull() {
                this[this.tableProdukcja.TelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFaxNull() {
                return this.IsNull(this.tableProdukcja.FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFaxNull() {
                this[this.tableProdukcja.FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableProdukcja.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableProdukcja.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWWWNull() {
                return this.IsNull(this.tableProdukcja.WWWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWWWNull() {
                this[this.tableProdukcja.WWWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNarodowośćNull() {
                return this.IsNull(this.tableProdukcja.NarodowośćColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNarodowośćNull() {
                this[this.tableProdukcja.NarodowośćColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WYPINRow : global::System.Data.DataRow {
            
            private WYPINDataTable tableWYPIN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WYPINRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWYPIN = ((WYPINDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableWYPIN.IDColumn]));
                }
                set {
                    this[this.tableWYPIN.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPDB {
                get {
                    return ((int)(this[this.tableWYPIN.IDPDBColumn]));
                }
                set {
                    this[this.tableWYPIN.IDPDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataWyp {
                get {
                    if (this.IsDataWypNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPIN.DataWypColumn]));
                    }
                }
                set {
                    this[this.tableWYPIN.DataWypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataOdd {
                get {
                    if (this.IsDataOddNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPIN.DataOddColumn]));
                    }
                }
                set {
                    this[this.tableWYPIN.DataOddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Osoba {
                get {
                    if (this.IsOsobaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPIN.OsobaColumn]));
                    }
                }
                set {
                    this[this.tableWYPIN.OsobaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StanPWyp {
                get {
                    if (this.IsStanPWypNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPIN.StanPWypColumn]));
                    }
                }
                set {
                    this[this.tableWYPIN.StanPWypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StanPOdd {
                get {
                    if (this.IsStanPOddNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPIN.StanPOddColumn]));
                    }
                }
                set {
                    this[this.tableWYPIN.StanPOddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FilmRow {
                get {
                    return ((FilmRow)(this.GetParentRow(this.Table.ParentRelations["FK_Film_WYPIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Film_WYPIN"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataWypNull() {
                return this.IsNull(this.tableWYPIN.DataWypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataWypNull() {
                this[this.tableWYPIN.DataWypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataOddNull() {
                return this.IsNull(this.tableWYPIN.DataOddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataOddNull() {
                this[this.tableWYPIN.DataOddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOsobaNull() {
                return this.IsNull(this.tableWYPIN.OsobaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOsobaNull() {
                this[this.tableWYPIN.OsobaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStanPWypNull() {
                return this.IsNull(this.tableWYPIN.StanPWypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStanPWypNull() {
                this[this.tableWYPIN.StanPWypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStanPOddNull() {
                return this.IsNull(this.tableWYPIN.StanPOddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStanPOddNull() {
                this[this.tableWYPIN.StanPOddColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WYPODINRow : global::System.Data.DataRow {
            
            private WYPODINDataTable tableWYPODIN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WYPODINRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWYPODIN = ((WYPODINDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableWYPODIN.IDColumn]));
                }
                set {
                    this[this.tableWYPODIN.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDPDB {
                get {
                    return ((int)(this[this.tableWYPODIN.IDPDBColumn]));
                }
                set {
                    this[this.tableWYPODIN.IDPDBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataWyp {
                get {
                    if (this.IsDataWypNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPODIN.DataWypColumn]));
                    }
                }
                set {
                    this[this.tableWYPODIN.DataWypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataOdd {
                get {
                    if (this.IsDataOddNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPODIN.DataOddColumn]));
                    }
                }
                set {
                    this[this.tableWYPODIN.DataOddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Osoba {
                get {
                    if (this.IsOsobaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPODIN.OsobaColumn]));
                    }
                }
                set {
                    this[this.tableWYPODIN.OsobaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StanPWyp {
                get {
                    if (this.IsStanPWypNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPODIN.StanPWypColumn]));
                    }
                }
                set {
                    this[this.tableWYPODIN.StanPWypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StanPOdd {
                get {
                    if (this.IsStanPOddNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableWYPODIN.StanPOddColumn]));
                    }
                }
                set {
                    this[this.tableWYPODIN.StanPOddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow FilmRow {
                get {
                    return ((FilmRow)(this.GetParentRow(this.Table.ParentRelations["FK_Film_WYPODIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Film_WYPODIN"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataWypNull() {
                return this.IsNull(this.tableWYPODIN.DataWypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataWypNull() {
                this[this.tableWYPODIN.DataWypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataOddNull() {
                return this.IsNull(this.tableWYPODIN.DataOddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataOddNull() {
                this[this.tableWYPODIN.DataOddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOsobaNull() {
                return this.IsNull(this.tableWYPODIN.OsobaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOsobaNull() {
                this[this.tableWYPODIN.OsobaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStanPWypNull() {
                return this.IsNull(this.tableWYPODIN.StanPWypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStanPWypNull() {
                this[this.tableWYPODIN.StanPWypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStanPOddNull() {
                return this.IsNull(this.tableWYPODIN.StanPOddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStanPOddNull() {
                this[this.tableWYPODIN.StanPOddColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DystrybucjaRowChangeEvent : global::System.EventArgs {
            
            private DystrybucjaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaRowChangeEvent(DystrybucjaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DystrybucjaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FilmRowChangeEvent : global::System.EventArgs {
            
            private FilmRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRowChangeEvent(FilmRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FilmRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LokZdjRowChangeEvent : global::System.EventArgs {
            
            private LokZdjRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjRowChangeEvent(LokZdjRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LokZdjRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ObsadaRowChangeEvent : global::System.EventArgs {
            
            private ObsadaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaRowChangeEvent(ObsadaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObsadaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OcenaRowChangeEvent : global::System.EventArgs {
            
            private OcenaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaRowChangeEvent(OcenaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OcenaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProdukcjaRowChangeEvent : global::System.EventArgs {
            
            private ProdukcjaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaRowChangeEvent(ProdukcjaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProdukcjaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WYPINRowChangeEvent : global::System.EventArgs {
            
            private WYPINRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINRowChangeEvent(WYPINRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPINRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WYPODINRowChangeEvent : global::System.EventArgs {
            
            private WYPODINRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINRowChangeEvent(WYPODINRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WYPODINRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MK_Film_DB_NET.defaultDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DystrybucjaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DystrybucjaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Dystrybucja";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("IDPDB", "IDPDB");
            tableMapping.ColumnMappings.Add("Nazwa", "Nazwa");
            tableMapping.ColumnMappings.Add("Adres", "Adres");
            tableMapping.ColumnMappings.Add("Tel", "Tel");
            tableMapping.ColumnMappings.Add("Fax", "Fax");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("WWW", "WWW");
            tableMapping.ColumnMappings.Add("Narodowość", "Narodowość");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Dystrybucja] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Dystrybucja] ([IDPDB], [Nazwa], [Adres], [Tel], [Fax], [Email], [WWW" +
                "], [Narodowość]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tel", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fax", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Email", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Narodowość", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Dystrybucja] SET [IDPDB] = @p1, [Nazwa] = @p2, [Adres] = @p3, [Tel] = @p4" +
                ", [Fax] = @p5, [Email] = @p6, [WWW] = @p7, [Narodowość] = @p8 WHERE (([ID] = @p9" +
                "))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tel", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fax", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Email", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Narodowość", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [IDPDB], [Nazwa], [Adres], [Tel], [Fax], [Email], [WWW], [Narodowość" +
                "] FROM [Dystrybucja]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.DystrybucjaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.DystrybucjaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.DystrybucjaDataTable dataTable = new defaultDataSet.DystrybucjaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.DystrybucjaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Dystrybucja");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, int p9) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FilmTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FilmTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Film";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Tytul", "Tytul");
            tableMapping.ColumnMappings.Add("TytulOrig", "TytulOrig");
            tableMapping.ColumnMappings.Add("Gatunek", "Gatunek");
            tableMapping.ColumnMappings.Add("Opis", "Opis");
            tableMapping.ColumnMappings.Add("pathtofront", "pathtofront");
            tableMapping.ColumnMappings.Add("pathtoback", "pathtoback");
            tableMapping.ColumnMappings.Add("OW_SD", "OW_SD");
            tableMapping.ColumnMappings.Add("OW_Obs", "OW_Obs");
            tableMapping.ColumnMappings.Add("OW_Zdj", "OW_Zdj");
            tableMapping.ColumnMappings.Add("OW_Wart", "OW_Wart");
            tableMapping.ColumnMappings.Add("OW_ALL", "OW_ALL");
            tableMapping.ColumnMappings.Add("DOE_Imie", "DOE_Imie");
            tableMapping.ColumnMappings.Add("DOE_Nazw", "DOE_Nazw");
            tableMapping.ColumnMappings.Add("DOE_Adres", "DOE_Adres");
            tableMapping.ColumnMappings.Add("DOE_MN_Nazwa", "DOE_MN_Nazwa");
            tableMapping.ColumnMappings.Add("DOE_MN_Adres", "DOE_MN_Adres");
            tableMapping.ColumnMappings.Add("DOE_MN_WWW", "DOE_MN_WWW");
            tableMapping.ColumnMappings.Add("DOE_MN_Tel", "DOE_MN_Tel");
            tableMapping.ColumnMappings.Add("DOE_MN_Fax", "DOE_MN_Fax");
            tableMapping.ColumnMappings.Add("DOE_MN_Email", "DOE_MN_Email");
            tableMapping.ColumnMappings.Add("DOE_Cena", "DOE_Cena");
            tableMapping.ColumnMappings.Add("DOE_DataSkat", "DOE_DataSkat");
            tableMapping.ColumnMappings.Add("DOE_DataUtr", "DOE_DataUtr");
            tableMapping.ColumnMappings.Add("DOE_NrKat", "DOE_NrKat");
            tableMapping.ColumnMappings.Add("DOE_WartAkt", "DOE_WartAkt");
            tableMapping.ColumnMappings.Add("DOE_DataZak", "DOE_DataZak");
            tableMapping.ColumnMappings.Add("DOE_Nośnik", "DOE_Nośnik");
            tableMapping.ColumnMappings.Add("IOF_RokProd", "IOF_RokProd");
            tableMapping.ColumnMappings.Add("IOF_DataPrem", "IOF_DataPrem");
            tableMapping.ColumnMappings.Add("IOF_CzasProj", "IOF_CzasProj");
            tableMapping.ColumnMappings.Add("IOF_FormWysw", "IOF_FormWysw");
            tableMapping.ColumnMappings.Add("IOF_SysKodObr", "IOF_SysKodObr");
            tableMapping.ColumnMappings.Add("IOF_JezykLekt", "IOF_JezykLekt");
            tableMapping.ColumnMappings.Add("IOF_JezykNap", "IOF_JezykNap");
            tableMapping.ColumnMappings.Add("IOF_KW_Nazwa", "IOF_KW_Nazwa");
            tableMapping.ColumnMappings.Add("IOF_KW_Typ", "IOF_KW_Typ");
            tableMapping.ColumnMappings.Add("IOF_KW_Wersja", "IOF_KW_Wersja");
            tableMapping.ColumnMappings.Add("IOF_KA_Nazwa", "IOF_KA_Nazwa");
            tableMapping.ColumnMappings.Add("IOF_KA_Typ", "IOF_KA_Typ");
            tableMapping.ColumnMappings.Add("IOF_KA_Wersja", "IOF_KA_Wersja");
            tableMapping.ColumnMappings.Add("IOF_ZAB_Nazwa", "IOF_ZAB_Nazwa");
            tableMapping.ColumnMappings.Add("IOF_ZAB_Typ", "IOF_ZAB_Typ");
            tableMapping.ColumnMappings.Add("IOF_ZAB_Wersja", "IOF_ZAB_Wersja");
            tableMapping.ColumnMappings.Add("IOF_KrajProd", "IOF_KrajProd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Film] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Film] ([Tytul], [TytulOrig], [Gatunek], [Opis], [pathtofront], [pathtoback], [OW_SD], [OW_Obs], [OW_Zdj], [OW_Wart], [OW_ALL], [DOE_Imie], [DOE_Nazw], [DOE_Adres], [DOE_MN_Nazwa], [DOE_MN_Adres], [DOE_MN_WWW], [DOE_MN_Tel], [DOE_MN_Fax], [DOE_MN_Email], [DOE_Cena], [DOE_DataSkat], [DOE_DataUtr], [DOE_NrKat], [DOE_WartAkt], [DOE_DataZak], [DOE_Nośnik], [IOF_RokProd], [IOF_DataPrem], [IOF_CzasProj], [IOF_FormWysw], [IOF_SysKodObr], [IOF_JezykLekt], [IOF_JezykNap], [IOF_KW_Nazwa], [IOF_KW_Typ], [IOF_KW_Wersja], [IOF_KA_Nazwa], [IOF_KA_Typ], [IOF_KA_Wersja], [IOF_ZAB_Nazwa], [IOF_ZAB_Typ], [IOF_ZAB_Wersja], [IOF_KrajProd]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p30, @p31, @p32, @p33, @p34, @p35, @p36, @p37, @p38, @p39, @p40, @p41, @p42, @p43, @p44)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tytul", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TytulOrig", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gatunek", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Opis", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "pathtofront", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "pathtoback", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_SD", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_Obs", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_Zdj", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_Wart", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_ALL", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Imie", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Nazw", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p17", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p18", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Tel", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p19", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Fax", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p20", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Email", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p21", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Cena", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p22", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_DataSkat", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p23", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_DataUtr", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p24", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_NrKat", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p25", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_WartAkt", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p26", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_DataZak", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p27", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Nośnik", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p28", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_RokProd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p29", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_DataPrem", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p30", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_CzasProj", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p31", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_FormWysw", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p32", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_SysKodObr", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p33", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_JezykLekt", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p34", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_JezykNap", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p35", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KW_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p36", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KW_Typ", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p37", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KW_Wersja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p38", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KA_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p39", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KA_Typ", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p40", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KA_Wersja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p41", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_ZAB_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p42", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_ZAB_Typ", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p43", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_ZAB_Wersja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p44", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KrajProd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Film] SET [Tytul] = @p1, [TytulOrig] = @p2, [Gatunek] = @p3, [Opis] = @p4, [pathtofront] = @p5, [pathtoback] = @p6, [OW_SD] = @p7, [OW_Obs] = @p8, [OW_Zdj] = @p9, [OW_Wart] = @p10, [OW_ALL] = @p11, [DOE_Imie] = @p12, [DOE_Nazw] = @p13, [DOE_Adres] = @p14, [DOE_MN_Nazwa] = @p15, [DOE_MN_Adres] = @p16, [DOE_MN_WWW] = @p17, [DOE_MN_Tel] = @p18, [DOE_MN_Fax] = @p19, [DOE_MN_Email] = @p20, [DOE_Cena] = @p21, [DOE_DataSkat] = @p22, [DOE_DataUtr] = @p23, [DOE_NrKat] = @p24, [DOE_WartAkt] = @p25, [DOE_DataZak] = @p26, [DOE_Nośnik] = @p27, [IOF_RokProd] = @p28, [IOF_DataPrem] = @p29, [IOF_CzasProj] = @p30, [IOF_FormWysw] = @p31, [IOF_SysKodObr] = @p32, [IOF_JezykLekt] = @p33, [IOF_JezykNap] = @p34, [IOF_KW_Nazwa] = @p35, [IOF_KW_Typ] = @p36, [IOF_KW_Wersja] = @p37, [IOF_KA_Nazwa] = @p38, [IOF_KA_Typ] = @p39, [IOF_KA_Wersja] = @p40, [IOF_ZAB_Nazwa] = @p41, [IOF_ZAB_Typ] = @p42, [IOF_ZAB_Wersja] = @p43, [IOF_KrajProd] = @p44 WHERE (([ID] = @p45))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tytul", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "TytulOrig", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Gatunek", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Opis", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "pathtofront", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "pathtoback", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_SD", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_Obs", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_Zdj", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p10", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_Wart", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p11", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "OW_ALL", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p12", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Imie", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p13", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Nazw", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p14", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p15", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p16", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p17", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p18", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Tel", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p19", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Fax", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p20", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_MN_Email", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p21", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Cena", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p22", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_DataSkat", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p23", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_DataUtr", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p24", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_NrKat", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p25", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_WartAkt", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p26", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_DataZak", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p27", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DOE_Nośnik", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p28", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_RokProd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p29", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_DataPrem", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p30", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_CzasProj", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p31", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_FormWysw", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p32", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_SysKodObr", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p33", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_JezykLekt", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p34", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_JezykNap", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p35", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KW_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p36", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KW_Typ", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p37", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KW_Wersja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p38", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KA_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p39", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KA_Typ", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p40", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KA_Wersja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p41", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_ZAB_Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p42", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_ZAB_Typ", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p43", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_ZAB_Wersja", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p44", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IOF_KrajProd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p45", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [ID], [Tytul], [TytulOrig], [Gatunek], [Opis], [pathtofront], [pathtoback], [OW_SD], [OW_Obs], [OW_Zdj], [OW_Wart], [OW_ALL], [DOE_Imie], [DOE_Nazw], [DOE_Adres], [DOE_MN_Nazwa], [DOE_MN_Adres], [DOE_MN_WWW], [DOE_MN_Tel], [DOE_MN_Fax], [DOE_MN_Email], [DOE_Cena], [DOE_DataSkat], [DOE_DataUtr], [DOE_NrKat], [DOE_WartAkt], [DOE_DataZak], [DOE_Nośnik], [IOF_RokProd], [IOF_DataPrem], [IOF_CzasProj], [IOF_FormWysw], [IOF_SysKodObr], [IOF_JezykLekt], [IOF_JezykNap], [IOF_KW_Nazwa], [IOF_KW_Typ], [IOF_KW_Wersja], [IOF_KA_Nazwa], [IOF_KA_Typ], [IOF_KA_Wersja], [IOF_ZAB_Nazwa], [IOF_ZAB_Typ], [IOF_ZAB_Wersja], [IOF_KrajProd] FROM [Film]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.FilmDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.FilmDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.FilmDataTable dataTable = new defaultDataSet.FilmDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.FilmDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Film");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string p1, 
                    string p2, 
                    string p3, 
                    string p4, 
                    string p5, 
                    string p6, 
                    string p7, 
                    string p8, 
                    string p9, 
                    string p10, 
                    string p11, 
                    string p12, 
                    string p13, 
                    string p14, 
                    string p15, 
                    string p16, 
                    string p17, 
                    string p18, 
                    string p19, 
                    string p20, 
                    string p21, 
                    string p22, 
                    string p23, 
                    string p24, 
                    string p25, 
                    string p26, 
                    string p27, 
                    string p28, 
                    string p29, 
                    string p30, 
                    string p31, 
                    string p32, 
                    string p33, 
                    string p34, 
                    string p35, 
                    string p36, 
                    string p37, 
                    string p38, 
                    string p39, 
                    string p40, 
                    string p41, 
                    string p42, 
                    string p43, 
                    string p44) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(p9));
            }
            if ((p10 == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(p10));
            }
            if ((p11 == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(p11));
            }
            if ((p12 == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(p12));
            }
            if ((p13 == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(p13));
            }
            if ((p14 == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(p14));
            }
            if ((p15 == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(p15));
            }
            if ((p16 == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(p16));
            }
            if ((p17 == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(p17));
            }
            if ((p18 == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(p18));
            }
            if ((p19 == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(p19));
            }
            if ((p20 == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(p20));
            }
            if ((p21 == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(p21));
            }
            if ((p22 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(p22));
            }
            if ((p23 == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(p23));
            }
            if ((p24 == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(p24));
            }
            if ((p25 == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(p25));
            }
            if ((p26 == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(p26));
            }
            if ((p27 == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(p27));
            }
            if ((p28 == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(p28));
            }
            if ((p29 == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(p29));
            }
            if ((p30 == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(p30));
            }
            if ((p31 == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(p31));
            }
            if ((p32 == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(p32));
            }
            if ((p33 == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(p33));
            }
            if ((p34 == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(p34));
            }
            if ((p35 == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(p35));
            }
            if ((p36 == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(p36));
            }
            if ((p37 == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(p37));
            }
            if ((p38 == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(p38));
            }
            if ((p39 == null)) {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(p39));
            }
            if ((p40 == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(p40));
            }
            if ((p41 == null)) {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = ((string)(p41));
            }
            if ((p42 == null)) {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = ((string)(p42));
            }
            if ((p43 == null)) {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = ((string)(p43));
            }
            if ((p44 == null)) {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = ((string)(p44));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string p1, 
                    string p2, 
                    string p3, 
                    string p4, 
                    string p5, 
                    string p6, 
                    string p7, 
                    string p8, 
                    string p9, 
                    string p10, 
                    string p11, 
                    string p12, 
                    string p13, 
                    string p14, 
                    string p15, 
                    string p16, 
                    string p17, 
                    string p18, 
                    string p19, 
                    string p20, 
                    string p21, 
                    string p22, 
                    string p23, 
                    string p24, 
                    string p25, 
                    string p26, 
                    string p27, 
                    string p28, 
                    string p29, 
                    string p30, 
                    string p31, 
                    string p32, 
                    string p33, 
                    string p34, 
                    string p35, 
                    string p36, 
                    string p37, 
                    string p38, 
                    string p39, 
                    string p40, 
                    string p41, 
                    string p42, 
                    string p43, 
                    string p44, 
                    int p45) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            if ((p9 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(p9));
            }
            if ((p10 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(p10));
            }
            if ((p11 == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(p11));
            }
            if ((p12 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(p12));
            }
            if ((p13 == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(p13));
            }
            if ((p14 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(p14));
            }
            if ((p15 == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(p15));
            }
            if ((p16 == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(p16));
            }
            if ((p17 == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(p17));
            }
            if ((p18 == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(p18));
            }
            if ((p19 == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(p19));
            }
            if ((p20 == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(p20));
            }
            if ((p21 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(p21));
            }
            if ((p22 == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(p22));
            }
            if ((p23 == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(p23));
            }
            if ((p24 == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(p24));
            }
            if ((p25 == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(p25));
            }
            if ((p26 == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(p26));
            }
            if ((p27 == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(p27));
            }
            if ((p28 == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(p28));
            }
            if ((p29 == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(p29));
            }
            if ((p30 == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(p30));
            }
            if ((p31 == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(p31));
            }
            if ((p32 == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(p32));
            }
            if ((p33 == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(p33));
            }
            if ((p34 == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(p34));
            }
            if ((p35 == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(p35));
            }
            if ((p36 == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(p36));
            }
            if ((p37 == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(p37));
            }
            if ((p38 == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(p38));
            }
            if ((p39 == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(p39));
            }
            if ((p40 == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(p40));
            }
            if ((p41 == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(p41));
            }
            if ((p42 == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(p42));
            }
            if ((p43 == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(p43));
            }
            if ((p44 == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(p44));
            }
            this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(p45));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LokZdjTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LokZdjTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LokZdj";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("IDPDB", "IDPDB");
            tableMapping.ColumnMappings.Add("NazwaObiektu", "NazwaObiektu");
            tableMapping.ColumnMappings.Add("Kraj", "Kraj");
            tableMapping.ColumnMappings.Add("Miejscowość", "Miejscowość");
            tableMapping.ColumnMappings.Add("Region", "Region");
            tableMapping.ColumnMappings.Add("Pora roku", "Pora roku");
            tableMapping.ColumnMappings.Add("Data", "Data");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [LokZdj] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [LokZdj] ([IDPDB], [NazwaObiektu], [Kraj], [Miejscowość], [Region], [" +
                "Pora roku], [Data]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NazwaObiektu", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Kraj", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Miejscowość", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Region", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Pora roku", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [LokZdj] SET [IDPDB] = @p1, [NazwaObiektu] = @p2, [Kraj] = @p3, [Miejscowo" +
                "ść] = @p4, [Region] = @p5, [Pora roku] = @p6, [Data] = @p7 WHERE (([ID] = @p8))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "NazwaObiektu", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Kraj", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Miejscowość", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Region", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Pora roku", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Data", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [IDPDB], [NazwaObiektu], [Kraj], [Miejscowość], [Region], [Pora roku" +
                "], [Data] FROM [LokZdj]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.LokZdjDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.LokZdjDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.LokZdjDataTable dataTable = new defaultDataSet.LokZdjDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.LokZdjDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LokZdj");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int p1, string p2, string p3, string p4, string p5, string p6, string p7) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int p1, string p2, string p3, string p4, string p5, string p6, string p7, int p8) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(p8));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ObsadaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ObsadaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Obsada";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ImieNazw", "ImieNazw");
            tableMapping.ColumnMappings.Add("Rola", "Rola");
            tableMapping.ColumnMappings.Add("IDPDB", "IDPDB");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Obsada] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Obsada] ([ImieNazw], [Rola], [IDPDB]) VALUES (@p1, @p2, @p3)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ImieNazw", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rola", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Obsada] SET [ImieNazw] = @p1, [Rola] = @p2, [IDPDB] = @p3 WHERE (([ID] = " +
                "@p4))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ImieNazw", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Rola", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [ImieNazw], [Rola], [IDPDB] FROM [Obsada]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.ObsadaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.ObsadaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.ObsadaDataTable dataTable = new defaultDataSet.ObsadaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.ObsadaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Obsada");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, int p3) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(p3));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, int p3, int p4) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(p3));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(p4));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OcenaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OcenaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Ocena";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Nazwa", "Nazwa");
            tableMapping.ColumnMappings.Add("Tytul", "Tytul");
            tableMapping.ColumnMappings.Add("Autor", "Autor");
            tableMapping.ColumnMappings.Add("WWW", "WWW");
            tableMapping.ColumnMappings.Add("Ocena", "Ocena");
            tableMapping.ColumnMappings.Add("IDPDB", "IDPDB");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Ocena] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Ocena] ([Nazwa], [Tytul], [Autor], [WWW], [Ocena], [IDPDB]) VALUES (" +
                "@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tytul", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Autor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Ocena", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Ocena] SET [Nazwa] = @p1, [Tytul] = @p2, [Autor] = @p3, [WWW] = @p4, [Oce" +
                "na] = @p5, [IDPDB] = @p6 WHERE (([ID] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tytul", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Autor", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Ocena", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [Nazwa], [Tytul], [Autor], [WWW], [Ocena], [IDPDB] FROM [Ocena]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.OcenaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.OcenaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.OcenaDataTable dataTable = new defaultDataSet.OcenaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.OcenaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Ocena");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, int p6) {
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(p6));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, string p3, string p4, string p5, int p6, int p7) {
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(p1));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(p6));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(p7));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProdukcjaTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProdukcjaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Produkcja";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("IDPDB", "IDPDB");
            tableMapping.ColumnMappings.Add("Nazwa", "Nazwa");
            tableMapping.ColumnMappings.Add("Adres", "Adres");
            tableMapping.ColumnMappings.Add("Tel", "Tel");
            tableMapping.ColumnMappings.Add("Fax", "Fax");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("WWW", "WWW");
            tableMapping.ColumnMappings.Add("Narodowość", "Narodowość");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Produkcja] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [Produkcja] ([IDPDB], [Nazwa], [Adres], [Tel], [Fax], [Email], [WWW]," +
                " [Narodowość]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tel", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fax", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Email", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Narodowość", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Produkcja] SET [IDPDB] = @p1, [Nazwa] = @p2, [Adres] = @p3, [Tel] = @p4, " +
                "[Fax] = @p5, [Email] = @p6, [WWW] = @p7, [Narodowość] = @p8 WHERE (([ID] = @p9))" +
                "";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Nazwa", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Adres", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Tel", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Fax", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Email", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "WWW", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p8", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Narodowość", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p9", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [IDPDB], [Nazwa], [Adres], [Tel], [Fax], [Email], [WWW], [Narodowość" +
                "] FROM [Produkcja]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.ProdukcjaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.ProdukcjaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.ProdukcjaDataTable dataTable = new defaultDataSet.ProdukcjaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.ProdukcjaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Produkcja");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(p8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, int p9) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            if ((p7 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(p7));
            }
            if ((p8 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(p8));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(p9));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WYPINTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WYPINTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WYPIN";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("IDPDB", "IDPDB");
            tableMapping.ColumnMappings.Add("DataWyp", "DataWyp");
            tableMapping.ColumnMappings.Add("DataOdd", "DataOdd");
            tableMapping.ColumnMappings.Add("Osoba", "Osoba");
            tableMapping.ColumnMappings.Add("StanPWyp", "StanPWyp");
            tableMapping.ColumnMappings.Add("StanPOdd", "StanPOdd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [WYPIN] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [WYPIN] ([IDPDB], [DataWyp], [DataOdd], [Osoba], [StanPWyp], [StanPOd" +
                "d]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Osoba", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [WYPIN] SET [IDPDB] = @p1, [DataWyp] = @p2, [DataOdd] = @p3, [Osoba] = @p4" +
                ", [StanPWyp] = @p5, [StanPOdd] = @p6 WHERE (([ID] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Osoba", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [IDPDB], [DataWyp], [DataOdd], [Osoba], [StanPWyp], [StanPOdd] FROM " +
                "[WYPIN]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.WYPINDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.WYPINDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.WYPINDataTable dataTable = new defaultDataSet.WYPINDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.WYPINDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "WYPIN");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int p1, string p2, string p3, string p4, string p5, string p6) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int p1, string p2, string p3, string p4, string p5, string p6, int p7) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(p7));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WYPODINTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeTransaction _transaction;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WYPODINTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlServerCe.SqlCeTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WYPODIN";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("IDPDB", "IDPDB");
            tableMapping.ColumnMappings.Add("DataWyp", "DataWyp");
            tableMapping.ColumnMappings.Add("DataOdd", "DataOdd");
            tableMapping.ColumnMappings.Add("Osoba", "Osoba");
            tableMapping.ColumnMappings.Add("StanPWyp", "StanPWyp");
            tableMapping.ColumnMappings.Add("StanPOdd", "StanPOdd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [WYPODIN] WHERE (([ID] = @p1))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [WYPODIN] ([IDPDB], [DataWyp], [DataOdd], [Osoba], [StanPWyp], [StanP" +
                "Odd]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Osoba", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [WYPODIN] SET [IDPDB] = @p1, [DataWyp] = @p2, [DataOdd] = @p3, [Osoba] = @" +
                "p4, [StanPWyp] = @p5, [StanPOdd] = @p6 WHERE (([ID] = @p7))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "IDPDB", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "DataOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "Osoba", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p5", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPWyp", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p6", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "StanPOdd", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@p7", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Original, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::MK_Film_DB_NET.Properties.Settings.Default.defaultConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [IDPDB], [DataWyp], [DataOdd], [Osoba], [StanPWyp], [StanPOdd] FROM " +
                "[WYPODIN]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(defaultDataSet.WYPODINDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual defaultDataSet.WYPODINDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            defaultDataSet.WYPODINDataTable dataTable = new defaultDataSet.WYPODINDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet.WYPODINDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(defaultDataSet dataSet) {
            return this.Adapter.Update(dataSet, "WYPODIN");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int p1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(p1));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int p1, string p2, string p3, string p4, string p5, string p6) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(p6));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int p1, string p2, string p3, string p4, string p5, string p6, int p7) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(p1));
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(p2));
            }
            if ((p3 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(p3));
            }
            if ((p4 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(p4));
            }
            if ((p5 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p5));
            }
            if ((p6 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(p6));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(p7));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private DystrybucjaTableAdapter _dystrybucjaTableAdapter;
        
        private FilmTableAdapter _filmTableAdapter;
        
        private LokZdjTableAdapter _lokZdjTableAdapter;
        
        private ObsadaTableAdapter _obsadaTableAdapter;
        
        private OcenaTableAdapter _ocenaTableAdapter;
        
        private ProdukcjaTableAdapter _produkcjaTableAdapter;
        
        private WYPINTableAdapter _wYPINTableAdapter;
        
        private WYPODINTableAdapter _wYPODINTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DystrybucjaTableAdapter DystrybucjaTableAdapter {
            get {
                return this._dystrybucjaTableAdapter;
            }
            set {
                this._dystrybucjaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FilmTableAdapter FilmTableAdapter {
            get {
                return this._filmTableAdapter;
            }
            set {
                this._filmTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LokZdjTableAdapter LokZdjTableAdapter {
            get {
                return this._lokZdjTableAdapter;
            }
            set {
                this._lokZdjTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ObsadaTableAdapter ObsadaTableAdapter {
            get {
                return this._obsadaTableAdapter;
            }
            set {
                this._obsadaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public OcenaTableAdapter OcenaTableAdapter {
            get {
                return this._ocenaTableAdapter;
            }
            set {
                this._ocenaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ProdukcjaTableAdapter ProdukcjaTableAdapter {
            get {
                return this._produkcjaTableAdapter;
            }
            set {
                this._produkcjaTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public WYPINTableAdapter WYPINTableAdapter {
            get {
                return this._wYPINTableAdapter;
            }
            set {
                this._wYPINTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public WYPODINTableAdapter WYPODINTableAdapter {
            get {
                return this._wYPODINTableAdapter;
            }
            set {
                this._wYPODINTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._dystrybucjaTableAdapter != null) 
                            && (this._dystrybucjaTableAdapter.Connection != null))) {
                    return this._dystrybucjaTableAdapter.Connection;
                }
                if (((this._filmTableAdapter != null) 
                            && (this._filmTableAdapter.Connection != null))) {
                    return this._filmTableAdapter.Connection;
                }
                if (((this._lokZdjTableAdapter != null) 
                            && (this._lokZdjTableAdapter.Connection != null))) {
                    return this._lokZdjTableAdapter.Connection;
                }
                if (((this._obsadaTableAdapter != null) 
                            && (this._obsadaTableAdapter.Connection != null))) {
                    return this._obsadaTableAdapter.Connection;
                }
                if (((this._ocenaTableAdapter != null) 
                            && (this._ocenaTableAdapter.Connection != null))) {
                    return this._ocenaTableAdapter.Connection;
                }
                if (((this._produkcjaTableAdapter != null) 
                            && (this._produkcjaTableAdapter.Connection != null))) {
                    return this._produkcjaTableAdapter.Connection;
                }
                if (((this._wYPINTableAdapter != null) 
                            && (this._wYPINTableAdapter.Connection != null))) {
                    return this._wYPINTableAdapter.Connection;
                }
                if (((this._wYPODINTableAdapter != null) 
                            && (this._wYPODINTableAdapter.Connection != null))) {
                    return this._wYPODINTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._dystrybucjaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._filmTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lokZdjTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._obsadaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ocenaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._produkcjaTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._wYPINTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._wYPODINTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(defaultDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._filmTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Film.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._filmTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._produkcjaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Produkcja.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._produkcjaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._wYPINTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.WYPIN.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._wYPINTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._wYPODINTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.WYPODIN.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._wYPODINTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ocenaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Ocena.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ocenaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dystrybucjaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Dystrybucja.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dystrybucjaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lokZdjTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LokZdj.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lokZdjTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._obsadaTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Obsada.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._obsadaTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(defaultDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._filmTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Film.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._filmTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._produkcjaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Produkcja.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._produkcjaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._wYPINTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.WYPIN.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._wYPINTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._wYPODINTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.WYPODIN.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._wYPODINTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ocenaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Ocena.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ocenaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dystrybucjaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Dystrybucja.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dystrybucjaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lokZdjTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LokZdj.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lokZdjTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._obsadaTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Obsada.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._obsadaTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(defaultDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._obsadaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Obsada.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._obsadaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lokZdjTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LokZdj.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lokZdjTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dystrybucjaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Dystrybucja.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dystrybucjaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ocenaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Ocena.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ocenaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._wYPODINTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.WYPODIN.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._wYPODINTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._wYPINTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.WYPIN.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._wYPINTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._produkcjaTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Produkcja.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._produkcjaTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._filmTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Film.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._filmTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(defaultDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._dystrybucjaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dystrybucjaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._filmTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._filmTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lokZdjTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lokZdjTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._obsadaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._obsadaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ocenaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ocenaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._produkcjaTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._produkcjaTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._wYPINTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._wYPINTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._wYPODINTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._wYPODINTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._dystrybucjaTableAdapter != null)) {
                    revertConnections.Add(this._dystrybucjaTableAdapter, this._dystrybucjaTableAdapter.Connection);
                    this._dystrybucjaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._dystrybucjaTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._dystrybucjaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dystrybucjaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dystrybucjaTableAdapter.Adapter);
                    }
                }
                if ((this._filmTableAdapter != null)) {
                    revertConnections.Add(this._filmTableAdapter, this._filmTableAdapter.Connection);
                    this._filmTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._filmTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._filmTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._filmTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._filmTableAdapter.Adapter);
                    }
                }
                if ((this._lokZdjTableAdapter != null)) {
                    revertConnections.Add(this._lokZdjTableAdapter, this._lokZdjTableAdapter.Connection);
                    this._lokZdjTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._lokZdjTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._lokZdjTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lokZdjTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lokZdjTableAdapter.Adapter);
                    }
                }
                if ((this._obsadaTableAdapter != null)) {
                    revertConnections.Add(this._obsadaTableAdapter, this._obsadaTableAdapter.Connection);
                    this._obsadaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._obsadaTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._obsadaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._obsadaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._obsadaTableAdapter.Adapter);
                    }
                }
                if ((this._ocenaTableAdapter != null)) {
                    revertConnections.Add(this._ocenaTableAdapter, this._ocenaTableAdapter.Connection);
                    this._ocenaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._ocenaTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._ocenaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ocenaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ocenaTableAdapter.Adapter);
                    }
                }
                if ((this._produkcjaTableAdapter != null)) {
                    revertConnections.Add(this._produkcjaTableAdapter, this._produkcjaTableAdapter.Connection);
                    this._produkcjaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._produkcjaTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._produkcjaTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._produkcjaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._produkcjaTableAdapter.Adapter);
                    }
                }
                if ((this._wYPINTableAdapter != null)) {
                    revertConnections.Add(this._wYPINTableAdapter, this._wYPINTableAdapter.Connection);
                    this._wYPINTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._wYPINTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._wYPINTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._wYPINTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._wYPINTableAdapter.Adapter);
                    }
                }
                if ((this._wYPODINTableAdapter != null)) {
                    revertConnections.Add(this._wYPODINTableAdapter, this._wYPODINTableAdapter.Connection);
                    this._wYPODINTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(workConnection));
                    this._wYPODINTableAdapter.Transaction = ((global::System.Data.SqlServerCe.SqlCeTransaction)(workTransaction));
                    if (this._wYPODINTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._wYPODINTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._wYPODINTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._dystrybucjaTableAdapter != null)) {
                    this._dystrybucjaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._dystrybucjaTableAdapter]));
                    this._dystrybucjaTableAdapter.Transaction = null;
                }
                if ((this._filmTableAdapter != null)) {
                    this._filmTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._filmTableAdapter]));
                    this._filmTableAdapter.Transaction = null;
                }
                if ((this._lokZdjTableAdapter != null)) {
                    this._lokZdjTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._lokZdjTableAdapter]));
                    this._lokZdjTableAdapter.Transaction = null;
                }
                if ((this._obsadaTableAdapter != null)) {
                    this._obsadaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._obsadaTableAdapter]));
                    this._obsadaTableAdapter.Transaction = null;
                }
                if ((this._ocenaTableAdapter != null)) {
                    this._ocenaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._ocenaTableAdapter]));
                    this._ocenaTableAdapter.Transaction = null;
                }
                if ((this._produkcjaTableAdapter != null)) {
                    this._produkcjaTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._produkcjaTableAdapter]));
                    this._produkcjaTableAdapter.Transaction = null;
                }
                if ((this._wYPINTableAdapter != null)) {
                    this._wYPINTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._wYPINTableAdapter]));
                    this._wYPINTableAdapter.Transaction = null;
                }
                if ((this._wYPODINTableAdapter != null)) {
                    this._wYPODINTableAdapter.Connection = ((global::System.Data.SqlServerCe.SqlCeConnection)(revertConnections[this._wYPODINTableAdapter]));
                    this._wYPODINTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591